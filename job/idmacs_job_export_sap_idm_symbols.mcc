<?xml version="1.0" encoding="UTF-8"?>
<IDM Exported_on="2013-04-23 18:04:22.287" ImXport_Version="v.7.2.6-720_VAL_REL-BUILD-16.10.2012_18:33:01" MC_Version="7.20.6.0-SQL-2012-10-16" ObjectType="EXPORT_STANDARD_JOB" Schema_Version="1082">
   <Questions/>
   <JOBS>
      <JOB>
         <ACTIVE>1</ACTIVE>
         <CHANGED_DATE>2013-04-23T17:51:59</CHANGED_DATE>
         <ENGINE_TYPE>2</ENGINE_TYPE>
         <GROUP_ID>3</GROUP_ID>
         <JOBDEFINITION>{B64}</JOBDEFINITION>
         <JOBGUID>7753DB54-9698-471A-9162-9EF503BD6038</JOBGUID>
         <JOBID>3681</JOBID>
         <LOCKED_JOB>0</LOCKED_JOB>
         <MAX_LOGENTRIES>100</MAX_LOGENTRIES>
         <NAME>Export SAP IDM Symbols</NAME>
         <PROVISION>0</PROVISION>
         <REVISION_NUMBER>0</REVISION_NUMBER>
         <SCHEDULE_RULE>6</SCHEDULE_RULE>
         <STATE>1</STATE>
         <STATUS>0</STATUS>
         <TEST>0</TEST>
         <DISPATCHERS>
            <DISPATCHER ID="1" NAME="mxmc72sp6_dispatcher"/>
         </DISPATCHERS>
      </JOB>
   </JOBS>
   <REPOSITORIES/>
   <SCHEDULES>
      <SCHEDULE>
         <RULENO>6</RULENO>
         <NAME>On demand</NAME>
         <WEEKDAYS/>
         <DESCRIPTION>Run only when requested</DESCRIPTION>
         <RULE_TYPE>2</RULE_TYPE>
         <RULE_TYPE_NAME>On demand</RULE_TYPE_NAME>
      </SCHEDULE>
   </SCHEDULES>
   <DISPATCHERS>
      <DISPATCHER>
         <LOGLEVEL>7</LOGLEVEL>
         <RELOAD_FREQUENCY>30</RELOAD_FREQUENCY>
         <UPDATE_FREQUENCY>5</UPDATE_FREQUENCY>
         <MACHINE>mxmc72sp6_dispatcher</MACHINE>
         <DISPATCHERID>1</DISPATCHERID>
         <STANDARD_DSE_PROVISION_JOBS>1</STANDARD_DSE_PROVISION_JOBS>
         <JAVA_DSE_PROVISION_JOBS>1</JAVA_DSE_PROVISION_JOBS>
         <MAX_RUNTIMES>1</MAX_RUNTIMES>
         <STANDARD_DSE_METACENTER_JOBS>1</STANDARD_DSE_METACENTER_JOBS>
      </DISPATCHER>
   </DISPATCHERS>
</IDM>
