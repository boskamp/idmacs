<?xml version="1.0" encoding="UTF-8"?>
<IDM Exported_on="2013-08-25 09:58:39.0" ImXport_Version="v.7.2.6-720_VAL_REL-BUILD-16.10.2012_18:33:01" MC_Version="7.20.6.0-ORA-2012-10-16" ObjectType="EXPORT_STANDARD_JOB" Schema_Version="1">
   <Questions/>
   <JOBS>
      <JOB>
         <ACTIVE>1</ACTIVE>
         <CHANGED_DATE>2013-08-25T09:58:12</CHANGED_DATE>
         <ENGINE_TYPE>2</ENGINE_TYPE>
         <GROUP_ID>121</GROUP_ID>
         <JOBDEFINITION>{B64}PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxteDpFTVMgeG1sbnM6bXg9Imh0dHA6Ly93d3cubWF4d2FyZS5jb20vRU1TIj4NCiAgIDxteDpHVUlEPjc3NTNEQjU0LTk2OTgtNDcxQS05MTYyLTlFRjUwM0JENjAzODwvbXg6R1VJRD4NCiAgIDxteDpWRVJTSU9OPjEuMDwvbXg6VkVSU0lPTj4NCiAgIDxteDpEU0VKb2JzPg0KICAgICAgPG14OlNlcXVlbmNlPg0KICAgICAgICAgPG14OlN0ZXAgRW5hYmxlZD0iVFJVRSIgS2V5PSJFeHBvcnQgU0FQIElETSBTeW1ib2xzIi8+DQogICAgICA8L214OlNlcXVlbmNlPg0KICAgICAgPG14OkpvYiBuYW1lPSJFeHBvcnQgU0FQIElETSBTeW1ib2xzIj4NCiAgICAgICAgIDxteDpEZXNjcmlwdGlvbi8+DQogICAgICAgICA8bXg6U2VxdWVuY2U+DQogICAgICAgICAgICA8bXg6U3RlcCBFbmFibGVkPSJUUlVFIiBLZXk9IjY1RTk3OUFELTBEMzgtNDUzRS1CREUyLUFENUY5NjE0OTU1MyIvPg0KICAgICAgICAgICAgPG14OlN0ZXAgRW5hYmxlZD0iVFJVRSIgS2V5PSI0OTc1NTU3QS1GRUQ5LTREREMtOEQzQy04NTUwN0I1QkUwRTUiLz4NCiAgICAgICAgICAgIDxteDpTdGVwIEVuYWJsZWQ9IlRSVUUiIEtleT0iREI4ODBBNTEtMDFBMy00MDU2LTkxNDItRDE1NEI2MDA2REQyIi8+DQogICAgICAgICAgICA8bXg6U3RlcCBFbmFibGVkPSJUUlVFIiBLZXk9IkRCM0NGOUVCLUNDMUEtNDgxRS05MjdDLTczN0RFQUJBOEI2NiIvPg0KICAgICAgICAgICAgPG14OlN0ZXAgRW5hYmxlZD0iVFJVRSIgS2V5PSIwMTRFODFEMC1EMDRELTQxQUQtOTBGOS0xOTMzNkIxQjE2MEUiLz4NCiAgICAgICAgICAgIDxteDpTdGVwIEVuYWJsZWQ9IlRSVUUiIEtleT0iMTNFNDc0NDgtMTZDNi00NTNCLTk0ODgtQTVFNUYzRkJCMzk1Ii8+DQogICAgICAgICAgICA8bXg6U3RlcCBFbmFibGVkPSJUUlVFIiBLZXk9IkQ3MkJBOENGLTRGNUEtNDNDRi1BODk3LTRGNTkyOUYzQkNBRSIvPg0KICAgICAgICAgICAgPG14OlN0ZXAgRW5hYmxlZD0iVFJVRSIgS2V5PSIzRjE3MDdFRi02OEVBLTRFNzktQTc0RC0zMjMxQkMyNkEwQTQiLz4NCiAgICAgICAgICAgIDxteDpTdGVwIEVuYWJsZWQ9IlRSVUUiIEtleT0iMTZDQUNBNTgtQzg1OS00QkY1LTk3RjEtRTlBQTlEQUE0QjMzIi8+DQogICAgICAgICAgICA8bXg6U3RlcCBFbmFibGVkPSJUUlVFIiBLZXk9IjM2MjI5MDgzLThBOTctNERENS1CQzc1LTBDOURDQkEyNEEyNCIvPg0KICAgICAgICAgICAgPG14OlN0ZXAgRW5hYmxlZD0iVFJVRSIgS2V5PSIyNTVDMDI0Ri0xNEYzLTQ5OTUtQjZGMi05OTI4ODM0QkE4RjciLz4NCiAgICAgICAgIDwvbXg6U2VxdWVuY2U+DQogICAgICAgICA8bXg6R2xvYmFscz4NCiAgICAgICAgICAgIDxteDphdHRyIG5hbWU9IiRJRE1BQ1NfRU1BQ1NfRElSIj4NCiAgICAgICAgICAgICAgIDxteDpkZXNjcmlwdGlvbi8+DQogICAgICAgICAgICAgICA8bXg6dHlwZT4wPC9teDp0eXBlPg0KICAgICAgICAgICAgICAgPG14OnZhbHVlPkM6XGVtYWNzLTI0LjE8L214OnZhbHVlPg0KICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iJElETUFDU19UUkFDRSI+DQogICAgICAgICAgICAgICA8bXg6ZGVzY3JpcHRpb24+U2V0IHRoaXMgdG8gYW55dGhpbmcgb3RoZXIgdGhhbiBlbXB0eSBzdHJpbmcgdG8gZW5hYmxlIHZlcmJvc2Ugam9iIGxvZ3MgdmlhIHdhcm5pbmcgbWVzc2FnZXM8L214OmRlc2NyaXB0aW9uPg0KICAgICAgICAgICAgICAgPG14OnR5cGU+MDwvbXg6dHlwZT4NCiAgICAgICAgICAgICAgIDxteDp2YWx1ZS8+DQogICAgICAgICAgICA8L214OmF0dHI+DQogICAgICAgICAgICA8bXg6YXR0ciBuYW1lPSIkSURNQUNTX0RJQ1RfRElSIj4NCiAgICAgICAgICAgICAgIDxteDpkZXNjcmlwdGlvbi8+DQogICAgICAgICAgICAgICA8bXg6dHlwZT4wPC9teDp0eXBlPg0KICAgICAgICAgICAgICAgPG14OnZhbHVlPiUkSURNQUNTX0VNQUNTX0RJUiVcZXRjXGlkbWFjc1xkaWN0PC9teDp2YWx1ZT4NCiAgICAgICAgICAgIDwvbXg6YXR0cj4NCiAgICAgICAgICAgIDxteDphdHRyIG5hbWU9IiRJRE1BQ1NfSEVMUF9GSUxFIj4NCiAgICAgICAgICAgICAgIDxteDpkZXNjcmlwdGlvbi8+DQogICAgICAgICAgICAgICA8bXg6dHlwZT4wPC9teDp0eXBlPg0KICAgICAgICAgICAgICAgPG14OnZhbHVlPmlkbWFjc191aGVscC50eHQ8L214OnZhbHVlPg0KICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iJElETUFDU19VTkRPQ1VNRU5URURfQlVJTFRJTlMiPg0KICAgICAgICAgICAgICAgPG14OmRlc2NyaXB0aW9uLz4NCiAgICAgICAgICAgICAgIDxteDp0eXBlPjA8L214OnR5cGU+DQogICAgICAgICAgICAgICA8bXg6dmFsdWU+ZmFsc2U8L214OnZhbHVlPg0KICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iJElETUFDU19TTklQUEVUU19ESVIiPg0KICAgICAgICAgICAgICAgPG14OmRlc2NyaXB0aW9uLz4NCiAgICAgICAgICAgICAgIDxteDp0eXBlPjA8L214OnR5cGU+DQogICAgICAgICAgICAgICA8bXg6dmFsdWU+JSRJRE1BQ1NfRU1BQ1NfRElSJVxldGNcaWRtYWNzXHNuaXBwZXRzXGpzMi1tb2RlPC9teDp2YWx1ZT4NCiAgICAgICAgICAgIDwvbXg6YXR0cj4NCiAgICAgICAgIDwvbXg6R2xvYmFscz4NCiAgICAgICAgIDxteDpGdW5jdGlvbnM+DQogICAgICAgICAgICA8bXg6RnVuY3Rpb24gRW5hYmxlZD0iVFJVRSIgU2NyaXB0PSJKU2NyaXB0IiBuYW1lPSJpZG1hY3Nfc2tpcF9pZl9ub3Rfb3JhIj4NCiAgICAgICAgICAgICAgIDxteDpDb2RlPi8vIENvcHlyaWdodCAyMDEzIExhbWJlcnQgQm9za2FtcA0KLy8NCi8vIEF1dGhvcjogTGFtYmVydCBCb3NrYW1wICZsdDtsYW1iZXJ0QGJvc2thbXAtY29uc3VsdGluZy5jb20ubm9zcGFtJmd0Ow0KLy8NCi8vIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIElETWFjcy4NCi8vDQovLyBJRE1hY3MgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQ0KLy8gaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkNCi8vIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yDQovLyAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLg0KLy8NCi8vIElETWFjcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLA0KLy8gYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YNCi8vIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUNCi8vIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuDQovLw0KLy8gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UNCi8vIGFsb25nIHdpdGggSURNYWNzLiAgSWYgbm90LCBzZWUgJmx0O2h0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8mZ3Q7Lg0KDQovKioNCiAqIENoZWNrcyB3aGV0aGVyIHRoZSBjdXJyZW50IGRhdGFiYXNlIHBsYXRmb3JtIGlzIE9yYWNsZS4NCiAqIElmIGl0IGlzIE5PVCwgc2tpcHMgZXhlY3V0aW9uIG9mIHRoZSBjdXJyZW50IHBhc3MuDQogKg0KICogUGFyYW1ldGVyczoNCiAqICAgbm9uZQ0KICoNCiAqIFJldHVybnM6DQogKiAgIG5vdGhpbmcNCiAqLw0KZnVuY3Rpb24gaWRtYWNzX3NraXBfaWZfbm90X29yYSgpew0KCXZhciBTQ1JJUFQgPSAiaWRtYWNzX3NraXBfaWZfbm90X29yYTogIjsNCg0KCXZhciBsdl9kYnR5cGUgPSAiJSRkZG0uZGF0YWJhc2V0eXBlJSI7DQoJaWRtYWNzX3RyYWNlKFNDUklQVCArICJsdl9kYnR5cGUgPSAiICsgbHZfZGJ0eXBlKTsNCg0KCS8vSWYgZGF0YWJhc2UgdHlwZSBpcyBub3QgT1JBDQoJaWYobHZfZGJ0eXBlICE9ICIyIikNCgl7DQoJCS8vU2tpcCB0aGlzIHBhc3MNCgkJdVNraXAoMik7DQoJfQ0KCXJldHVybjsNCn0vL2lkbWFjc19za2lwX2lmX25vdF9vcmENCjwvbXg6Q29kZT4NCiAgICAgICAgICAgIDwvbXg6RnVuY3Rpb24+DQogICAgICAgICAgICA8bXg6RnVuY3Rpb24gRW5hYmxlZD0iVFJVRSIgU2NyaXB0PSJKU2NyaXB0IiBuYW1lPSJpZG1hY3NfdHJhY2UiPg0KICAgICAgICAgICAgICAgPG14OkNvZGU+Ly8gQ29weXJpZ2h0IDIwMTMgTGFtYmVydCBCb3NrYW1wDQovLw0KLy8gQXV0aG9yOiBMYW1iZXJ0IEJvc2thbXAgJmx0O2xhbWJlcnRAYm9za2FtcC1jb25zdWx0aW5nLmNvbS5ub3NwYW0mZ3Q7DQovLw0KLy8gVGhpcyBmaWxlIGlzIHBhcnQgb2YgSURNYWNzLg0KLy8NCi8vIElETWFjcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5DQovLyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQ0KLy8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3INCi8vIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uDQovLw0KLy8gSURNYWNzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsDQovLyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZg0KLy8gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQ0KLy8gR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCi8vDQovLyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQ0KLy8gYWxvbmcgd2l0aCBJRE1hY3MuICBJZiBub3QsIHNlZSAmbHQ7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLyZndDsuDQoNCi8qKg0KICogUmVjb3JkcyB0aGUgc3RyaW5nIHBhc3NlZCBpbiBQYXIgaW50byBhIHBlcnNpc3RlbnQgdHJhY2UsDQogKiBpZiB0aGUgam9iIHZhcmlhYmxlICRJRE1BQ1NfVFJBQ0UgaXMgbm90IGVtcHR5Lg0KICoNCiAqIEN1cnJlbnRseSwgYWxsIG1lc3NhZ2VzIHdpbGwgYmUgcGFzc2VkIHRvIHVXYXJuaW5nIGlmIHRoZQ0KICogdHJhY2UgaXMgb24uIEhvd2V2ZXIsIHRoaXMgYXBwcm9hY2ggZG9lc24ndCB3b3JrIGZvciBhbGwNCiAqIHNjcmlwdHMsIHNvIHNvbWUgdHJhY2UgbWVzc2FnZXMgYXJlIGN1cnJlbnRseSBqdXN0IGxvc3QuDQogKg0KICogUGFyYW1ldGVyczoNCiAqICAgaXZfbWVzc2FnZSAtDQogKiAgICAgc3RyaW5nIG1lc3NhZ2U7IGl0IHNob3VsZCBiZSBwcmVmaXhlZCB3aXRoIHRoZQ0KICogICAgIG5hbWUgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24sIGZvbGxvd2VkIGJ5IGENCiAqICAgICBjb2xvbiBhbmQgc3BhY2UsIGUuZy4NCiAqICAgICAiaWRtYWNzX3Rlc3Q6IFRoaXMgaXMgYSB0ZXN0IG1lc3NhZ2UiDQogKg0KICogUmV0dXJuczoNCiAqICAgbm90aGluZw0KICovDQpmdW5jdGlvbiBpZG1hY3NfdHJhY2UoaXZfbWVzc2FnZSl7DQogICAgaWYoIiUkSURNQUNTX1RSQUNFJSIgIT0gIiIpIHsNCgkvLyBUT0RPOiBmb3Igc29tZSByZWFzb25zLCB0aGlzIGxvZ2dpbmcgYXBwcm9hY2gNCgkvLyBkb2Vzbid0IGdlbmVyYXRlIGFueSBtZXNzYWdlcyBpbiB0aGUgbW9zdCBjb21wbGV4IHBhc3M6DQoJLy8NCgkvLyBQYXJzZSBCdWlsdC1JbiBGdW5jdGlvbnMgSGVscCBGaWxlDQoJLy8NCgkvLyBUaGluayBhYm91dCBzd2l0Y2hpbmcgdG8gamF2YS51dGlsLmxvZ2dpbmcNCiAgICAgICAgdVdhcm5pbmcoaXZfbWVzc2FnZSk7DQogICAgfQ0KfS8vaWRtYWNzX3RyYWNlDQo8L214OkNvZGU+DQogICAgICAgICAgICA8L214OkZ1bmN0aW9uPg0KICAgICAgICAgICAgPG14OkZ1bmN0aW9uIEVuYWJsZWQ9IlRSVUUiIFNjcmlwdD0iSlNjcmlwdCIgbmFtZT0iaWRtYWNzX21rZGlycyI+DQogICAgICAgICAgICAgICA8bXg6Q29kZT4vLyBDb3B5cmlnaHQgMjAxMyBMYW1iZXJ0IEJvc2thbXANCi8vDQovLyBBdXRob3I6IExhbWJlcnQgQm9za2FtcCAmbHQ7bGFtYmVydEBib3NrYW1wLWNvbnN1bHRpbmcuY29tLm5vc3BhbSZndDsNCi8vDQovLyBUaGlzIGZpbGUgaXMgcGFydCBvZiBJRE1hY3MuDQovLw0KLy8gSURNYWNzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkNCi8vIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQovLyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcg0KLy8gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4NCi8vDQovLyBJRE1hY3MgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwNCi8vIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mDQovLyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlDQovLyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KLy8NCi8vIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQovLyBhbG9uZyB3aXRoIElETWFjcy4gIElmIG5vdCwgc2VlICZsdDtodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvJmd0Oy4NCg0KLyoqDQogKiBDcmVhdGVzIGRpcmVjdG9yaWVzIHNwZWNpZmllZCBpbiBpb19saXN0LiBJZiByZXF1aXJlZCwgYW55DQogKiBpbnRlcm1lZGlhdGUgc3ViZGlyZWN0b3JpZXMgdGhhdCBkb24ndCBleGl0IHlldCB3aWxsIGJlDQogKiBjcmVhdGVkIGF1dG9tYXRpY2FsbHkuDQogKg0KICogSWYgYW55IG9mIHRoZSBkaXJlY3RvcmllcyBpbiBpb19saXN0IGNhbm5vdCBiZSBjcmVhdGVkLA0KICogVEhJUyBTQ1JJUFQgV0lMTCBDQUxMIHVTdG9wKCkgdG8gc3RvcCB0aGUgY3VycmVudGx5DQogKiBleGVjdXRpbmcgam9iLg0KICoNCiAqIFBhcmFtZXRlcnM6DQogKiAgIGlvX2xpc3QgLQ0KICogICAgIGphdmEudXRpbC5MaXN0IHdob3NlIHZhbHVlcyB3aWxsIGJlIGl0ZXJhdGVkDQogKiAgICAgYW5kIHVzZWQgYXMgZGlyZWN0b3J5IG5hbWVzIHRvIGNyZWF0ZS4gVGhlDQogKiAgICAga2V5IG5hbWVzIGRvbid0IG1hdHRlci4gWW91IG1heSB3YW50IHRvIHVzZQ0KICogICAgIHNvbWV0aGluZyBsaWtlICdESVIxJywgJ0RJUjInLCAnRElSMycgZXRjLA0KICogICAgIGJ1dCBhbnl0aGluZyBlbHNlIHdpbGwgd29yayBhcyB3ZWxsLiBOb3RlDQogKiAgICAgdGhhdCB0aGUgb3JkZXIgaW4gd2hpY2ggZGlyZWN0b3JpZXMgaW4gaW9fbGlzdA0KICogICAgIHdpbGwgYmUgY3JlYXRlZCBpcyB1bmRlZmluZWQuDQogKg0KICogUmV0dXJuczoNCiAqICAgTm90aGluZw0KICovDQpmdW5jdGlvbiBpZG1hY3NfbWtkaXJzKGlvX2xpc3QpIHsNCiAgICB2YXIgU0NSSVBUID0gImlkbWFjc19ta2RpcnM6ICI7DQogICAgaWRtYWNzX3RyYWNlKFNDUklQVCArICJpb19saXN0ID0gIiArIGlvX2xpc3QpOw0KDQogICAgdmFyIGx0X2Rpcl9uYW1lcyA9IGlvX2xpc3Qua2V5U2V0KCkudG9BcnJheSgpOw0KDQogICAgZm9yICh2YXIgaSA9IDA7IGkgJmx0OyBsdF9kaXJfbmFtZXMubGVuZ3RoOyArK2kpIHsNCiAgICAgICAgdmFyIGx2X2Rpcl9uYW1lID0gaW9fbGlzdC5nZXQobHRfZGlyX25hbWVzW2ldKTsNCiAgICAgICAgdmFyIGxvX2RpciAgICAgID0gbmV3IGphdmEuaW8uRmlsZShsdl9kaXJfbmFtZSk7DQogICAgICAgIHZhciBsdl9wYXRoICAgICA9IGxvX2Rpci5nZXRDYW5vbmljYWxQYXRoKCk7DQogICAgICAgIHZhciBsdl9lcnJvciAgICA9IG51bGw7DQoNCiAgICAgICAgaWYgKCFsb19kaXIuZXhpc3RzKCkpIHsNCiAgICAgICAgICAgIGlmIChsb19kaXIubWtkaXJzKCkpIHsNCiAgICAgICAgICAgICAgICBpZG1hY3NfdHJhY2UoIlN1Y2Nlc3NmdWxseSBjcmVhdGVkICIgKyBsdl9wYXRoKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgbHZfZXJyb3IgPSAiRXJyb3IgY3JlYXRpbmcgZGlyZWN0b3J5ICIgKyBsdl9wYXRoOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgaWYgKCFsb19kaXIuaXNEaXJlY3RvcnkoKSkgew0KICAgICAgICAgICAgICAgIGx2X2Vycm9yID0gbHZfcGF0aA0KICAgICAgICAgICAgICAgICAgICArICIgaXMgYSBmaWxlLCBidXQgbXVzdCBiZSBkaXJlY3RvcnkuIg0KICAgICAgICAgICAgICAgICAgICArICIgU3BlY2lmeSBkaWZmZXJlbnQgZGlyZWN0b3J5IG9yIGRlbGV0ZSBjb25mbGljdGluZyBmaWxlLiI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAobHZfZXJyb3IgIT0gbnVsbCkgew0KICAgICAgICAgICAgdUVycm9yKGx2X2Vycm9yKTsNCiAgICAgICAgICAgIHVTdG9wKGx2X2Vycm9yKTsgLy89PT09PT09PT09PT09PT09PT09PT09PT09IEVYSVQgSk9CDQogICAgICAgIH0NCiAgICB9Ly8gZm9yDQoNCn0vL2lkbWFjc19ta2RpcnMNCjwvbXg6Q29kZT4NCiAgICAgICAgICAgIDwvbXg6RnVuY3Rpb24+DQogICAgICAgICAgICA8bXg6RnVuY3Rpb24gRW5hYmxlZD0iVFJVRSIgU2NyaXB0PSJKU2NyaXB0IiBuYW1lPSJpZG1hY3NfYnVpbHRpbnNfbmV4dF9lbnRyeSI+DQogICAgICAgICAgICAgICA8bXg6Q29kZT4vLyBDb3B5cmlnaHQgMjAxMyBMYW1iZXJ0IEJvc2thbXANCi8vDQovLyBBdXRob3I6IExhbWJlcnQgQm9za2FtcCAmbHQ7bGFtYmVydEBib3NrYW1wLWNvbnN1bHRpbmcuY29tLm5vc3BhbSZndDsNCi8vDQovLyBUaGlzIGZpbGUgaXMgcGFydCBvZiBJRE1hY3MuDQovLw0KLy8gSURNYWNzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkNCi8vIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQovLyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcg0KLy8gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4NCi8vDQovLyBJRE1hY3MgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwNCi8vIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mDQovLyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlDQovLyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KLy8NCi8vIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQovLyBhbG9uZyB3aXRoIElETWFjcy4gIElmIG5vdCwgc2VlICZsdDtodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvJmd0Oy4NCg0KLyoqDQogKiBSZWFkcyB0aGUgY29udGVudCBvZiBhIGZpbGUgY29udGFpbmluZyB0aGUgbmFtZXMsIHNpZ25hdHVyZXMgYW5kDQogKiBkb2N1bWVudGF0aW9uIG9mIGJ1aWx0LWluIGZ1bmN0aW9ucywgYW5kIGNyZWF0ZXMgc25pcHBldCBmaWxlcw0KICogZm9yIGVhY2ggb2YgdGhlc2UgZnVuY3Rpb25zLiBJdCB3aWxsIGFsc28gY3JlYXRlIG9uZSBkaWN0aW9uYXJ5DQogKiBmaWxlIGNvbnRhaW5pbmcgYWxsIGJ1aWx0LWluIGZ1bmN0aW9uIG5hbWVzLg0KICoNCiAqIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW52b2tlZCBPTkxZIE9OQ0UuIEl0IHdpbGwgcHJvY2Vzcw0KICogdGhlIGNvbXBsZXRlIGNvbnRlbnQgb2YgSEVMUF9GSUxFIChzZWUgYmVsb3cpIGluIG9uZSBzdGVwLg0KICoNCiAqIFBhcmFtZXRlcnM6DQogKiAgIFBhciAtIGphdmEudXRpbC5MaXN0IGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBkYXRhOg0KICogICAgICAgICBLZXk6ICAgU05JUFBFVFNfRElSDQogKiAgICAgICAgIFZhbHVlOiBEaXJlY3RvcnkgcGF0aCBhcyBzdHJpbmcgd2hlcmUgdG8gY3JlYXRlIHNuaXBwZXQgZmlsZXM7DQogKiAgICAgICAgICAgICAgICB3aWxsIGJlIGNyZWF0ZWQgaWYgaXQgZG9lc24ndCBleGlzdCB5ZXQNCiAqDQogKiAgICAgICAgIEtleTogICBESUNUSU9OQVJZX0ZJTEUNCiAqICAgICAgICAgVmFsdWU6IEZpbGUgbmFtZSBvZiBkaWN0aW9uYXJ5IGZpbGUgYXMgc3RyaW5nDQogKg0KICogICAgICAgICBLZXk6ICAgSEVMUF9GSUxFDQogKiAgICAgICAgIFZhbHVlOiBOYW1lIG9mIGZpbGUgaW50byB3aGljaCB0aGUgYnVpbHQtaW4gZnVuY3Rpb24gZGVzY3JpcHRpb25zDQogKiAgICAgICAgICAgICAgICBoYXZlIGJlZW4gZXhwb3J0ZWQgYmVmb3JlDQogKg0KICogUmV0dXJuczoNCiAqICAgbm90aGluZw0KICovDQpmdW5jdGlvbiBpZG1hY3NfYnVpbHRpbnNfbmV4dF9lbnRyeShQYXIpew0KICAgIHZhciBMQ19TQ1JJUFQgPSAiaWRtYWNzX2J1aWx0aW5zX25leHRfZW50cnk6ICI7DQogICAgaWRtYWNzX3RyYWNlKExDX1NDUklQVCArICJQYXIgPSAiICsgUGFyKTsNCg0KICAgIC8vIERlZmluZSBhbGwgZ2xvYmFsIHZhcmlhYmxlcw0KICAgIGlkbWFjc19idWlsdGluc19kZWZpbmVfZ2xvYmFscygpOw0KDQogICAgLy8gQ3JlYXRlL3ZlcmlmeSBhbGwgcmVxdWlyZWQgZGlyZWN0b3JpZXMNCiAgICB2YXIgbHZfc25pcHBldHNfZGlyID0gUGFyLmdldCgiU05JUFBFVFNfRElSIik7DQogICAgdmFyIGx2X2RpY3Rpb25hcnlfZmlsZSA9IFBhci5nZXQoIkRJQ1RJT05BUllfRklMRSIpOw0KDQogICAgdmFyIGxvX2RpcnMgPSBuZXcgamF2YS51dGlsLkhhc2hNYXAoKTsNCiAgICBsb19kaXJzLnB1dCgiRElSMCIsIGx2X3NuaXBwZXRzX2Rpcik7DQogICAgaWRtYWNzX21rZGlycyhsb19kaXJzKTsNCg0KICAgIC8vIFJlYWQgaGVscCBmaWxlIGNvbnRlbnQgaW50byBnbG9iYWwgdmFyaWFibGUgZ3ZfaGVscA0KICAgIGlkbWFjc19idWlsdGluc19yZWFkX2hlbHBfZmlsZShQYXIuZ2V0KCJIRUxQX0ZJTEUiKSk7DQogICAgDQogICAgdmFyIGxvX2hlbHBfcGF0dGVybg0KCSAgICA9IGphdmEudXRpbC5yZWdleC5QYXR0ZXJuLmNvbXBpbGUoR0NfUkVHRVhfT05FX0ZVTkNUSU9OLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGphdmEudXRpbC5yZWdleC5QYXR0ZXJuLkNPTU1FTlRTDQoJCQkJCSAgICAgIHwgamF2YS51dGlsLnJlZ2V4LlBhdHRlcm4uRE9UQUxMKTsNCg0KICAgIHZhciBsb19oZWxwX21hdGNoZXIgPSBsb19oZWxwX3BhdHRlcm4ubWF0Y2hlcihndl9oZWxwKTsNCg0KICAgIHZhciBsdl9tYXRjaF9udW1iZXIgPSAwOw0KDQogICAgLy8gSW5pdGlhbGl6ZSBnbG9iYWwgbGlzdCBvZiBmdW5jdGlvbiBuYW1lcy4NCiAgICAvLyBVc2VkIGJ5IGlkbWFjc19idWlsdGluc19jcmVhdGVfZGljdGlvbmFyeSBhZnRlciBsb29wLg0KICAgIGdvX2Z1bmNfbmFtZXMgPSBuZXcgamF2YS51dGlsLkFycmF5TGlzdCgpOw0KDQogICAgLy8gUHJvY2VzcyBhbGwgZnVuY3Rpb25zIGluIGd2X2hlbHANCiAgICB3aGlsZSAobG9faGVscF9tYXRjaGVyLmZpbmQoKSkgew0KICAgICAgICB2YXIgbHZfd2hvbGVfbWF0Y2ggPSBsb19oZWxwX21hdGNoZXIuZ3JvdXAoMCk7DQogICAgICAgIGlkbWFjc190cmFjZSgiU1RBUlQgUFJPQ0VTU0lORyBcIiIgKyBsdl93aG9sZV9tYXRjaCArICJcIiIpOw0KDQogICAgICAgIGd2X2Z1bmNfbmFtZSA9IGxvX2hlbHBfbWF0Y2hlci5ncm91cCgxKTsNCiAgICAgICAgZ3ZfZnVuY19zaWduYXR1cmUgPSBsb19oZWxwX21hdGNoZXIuZ3JvdXAoMyk7DQogICAgICAgIGd2X2Z1bmNfY29tbWVudCA9IGxvX2hlbHBfbWF0Y2hlci5ncm91cCgxMyk7DQoNCiAgICAgICAgaWYgKGx2X3dob2xlX21hdGNoLnRyaW0oKS5lcXVhbHMoZ3ZfZnVuY19uYW1lKSkgew0KICAgICAgICAgICAgaWRtYWNzX3RyYWNlKCJJZ25vcmluZyB0aGlzIG1hdGNoIg0KICAgICAgICAgICAgICAgICAgICAgICAgICsgIiAoZG9lc24ndCBsb29rIGxpa2UgYSBmdW5jdGlvbiBkZWZpbml0aW9uKSIpOw0KICAgICAgICAgICAgY29udGludWU7IC8vID09PT09PT09PT09PT09PT09PT09PT0gd2l0aCBuZXh0IGZ1bmN0aW9uDQogICAgICAgIH0NCiAgICAgICAgLy8gS2VlcCB0cmFjayBvZiBudW1iZXIgb2YgcmVhbCBtYXRjaGVzLCBpZ25vcmluZyBvZGQgb25lcw0KICAgICAgICBsdl9tYXRjaF9udW1iZXIrKzsNCg0KICAgICAgICBpZG1hY3NfdHJhY2UoImd2X2Z1bmNfbmFtZSAgICAgID0gXCIiICsgZ3ZfZnVuY19uYW1lICsgIlwiIik7DQogICAgICAgIGlkbWFjc190cmFjZSgiZ3ZfZnVuY19zaWduYXR1cmUgPSBcIiIgKyBndl9mdW5jX3NpZ25hdHVyZSArICJcIiIpOw0KICAgICAgICBpZG1hY3NfdHJhY2UoImd2X2Z1bmNfY29tbWVudCAgID0gXCIiICsgZ3ZfZnVuY19jb21tZW50ICsgIlwiIik7DQoNCiAgICAgICAgLy8gTm90ZSB0aGF0IGdyb3VwIDAgYWx3YXlzIGV4aXN0cywgYW5kIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUNCiAgICAgICAgLy8gdmFsdWUgcmV0dXJuZWQgYnkgZ3JvdXBDb3VudC4gVGhlcmVmb3JlLCB0ZXJtaW5hdGlvbiBjb25kaXRpb24NCiAgICAgICAgLy8gbXVzdCBiZSAibGVzcyB0aGFuIG9yIGVxdWFsIiAoJmx0Oz0pLCBub3QgImxlc3MgdGhhbiIgKCZsdDspDQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpICZsdDs9IGxvX2hlbHBfbWF0Y2hlci5ncm91cENvdW50KCk7ICsraSkgew0KICAgICAgICAgICAgaWRtYWNzX3RyYWNlKCJNYXRjaCAiICsgbHZfbWF0Y2hfbnVtYmVyDQogICAgICAgICAgICAgICAgICAgICAgICAgKyAiOiBsb19oZWxwX21hdGNoZXIuZ3JvdXAoIiArIGkgKyAiKT1cIiINCiAgICAgICAgICAgICAgICAgICAgICAgICArIGxvX2hlbHBfbWF0Y2hlci5ncm91cChpKSArICJcIiIpOw0KICAgICAgICB9DQogICAgICAgIC8vIENsZWFuaW5nIHVwIHRoZSBnbG9iYWwgYXJndW1lbnQgbGlzdCBvYmplY3RzIGlzIGRvbmUgaW5zaWRlDQogICAgICAgIC8vID09Jmd0OyBtdXN0IGFsd2F5cyBiZSBpbnZva2VkLCBldmVuIGZvciBlbXB0eSAobnVsbCkgc2lnbmF0dXJlcw0KICAgICAgICBpZG1hY3NfYnVpbHRpbnNfcGFyc2Vfc2lnbmF0dXJlKCk7DQoNCiAgICAgICAgLy8gTm93IHRoYXQgYWxsIGluZm9ybWF0aW9uIGFib3V0IG9uZSBmdW5jdGlvbiBoYXMgYmVlbiBjb2xsZWN0ZWQNCiAgICAgICAgLy8gaW50byBnbG9iYWwgdmFyaWFibGVzLCB3cml0ZSB0aGUgY29ycmVzcG9uZGluZyBzbmlwcGV0IGZpbGUNCiAgICAgICAgaWRtYWNzX2J1aWx0aW5zX3dyaXRlX3NuaXBwZXQobHZfc25pcHBldHNfZGlyKTsNCg0KICAgICAgICAvLyBDb2xsZWN0IGZ1bmN0aW9uIG5hbWVzIGZvciBidWlsZGluZyBkaWN0aW9uYXJ5IG91dCBvZiBsb29wDQogICAgICAgIGdvX2Z1bmNfbmFtZXMuYWRkKGd2X2Z1bmNfbmFtZSk7DQoNCiAgICB9Ly8gd2hpbGUgKGxvX2hlbHBfbWF0Y2hlci5maW5kKCkpDQoNCiAgICAvLyBDcmVhdGUgZGljdGlvbmFyeSBmaWxlIGNvbnRhaW5pbmcgYWxsIGZ1bmN0aW9uIG5hbWVzDQogICAgaWRtYWNzX2J1aWx0aW5zX2NyZWF0ZV9kaWN0aW9uYXJ5KGx2X2RpY3Rpb25hcnlfZmlsZSk7DQoNCiAgICBpZG1hY3NfdHJhY2UoIlRvdGFsIG51bWJlciBvZiBmdW5jdGlvbnMgc3VjY2Vzc2Z1bGx5IHBhcnNlZDogIg0KICAgICAgICAgICAgICAgICArIGx2X21hdGNoX251bWJlcik7DQp9Ly9pZG1hY3NfYnVpbHRpbnNfbmV4dF9lbnRyeTwvbXg6Q29kZT4NCiAgICAgICAgICAgIDwvbXg6RnVuY3Rpb24+DQogICAgICAgICAgICA8bXg6RnVuY3Rpb24gRW5hYmxlZD0iVFJVRSIgU2NyaXB0PSJKU2NyaXB0IiBuYW1lPSJpZG1hY3NfYnVpbHRpbnNfZGVmaW5lX2dsb2JhbHMiPg0KICAgICAgICAgICAgICAgPG14OkNvZGU+Ly8gQ29weXJpZ2h0IDIwMTMgTGFtYmVydCBCb3NrYW1wDQovLw0KLy8gQXV0aG9yOiBMYW1iZXJ0IEJvc2thbXAgJmx0O2xhbWJlcnRAYm9za2FtcC1jb25zdWx0aW5nLmNvbS5ub3NwYW0mZ3Q7DQovLw0KLy8gVGhpcyBmaWxlIGlzIHBhcnQgb2YgSURNYWNzLg0KLy8NCi8vIElETWFjcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5DQovLyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQ0KLy8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3INCi8vIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uDQovLw0KLy8gSURNYWNzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsDQovLyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZg0KLy8gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQ0KLy8gR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCi8vDQovLyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQ0KLy8gYWxvbmcgd2l0aCBJRE1hY3MuICBJZiBub3QsIHNlZSAmbHQ7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLyZndDsuDQoNCi8vIEdMT0JBTCBEQVRBID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQovKioNCiAqIFN0cmluZyByZXR1cm5lZCBieSBidWlsdC1pbiBmdW5jdGlvbiB1SGVscCgpOw0KICovDQp2YXIgZ3ZfaGVscCA9IG51bGw7DQoNCi8qKg0KICogTmFtZSBvZiBmdW5jdGlvbiBjdXJyZW50bHkgYmVpbmcgcHJvY2Vzc2VkIGFzIHN0cmluZy4NCiAqLw0KdmFyIGd2X2Z1bmNfbmFtZSA9IG51bGw7DQoNCi8qKg0KICogU2lnbmF0dXJlIG9mIGZ1bmN0aW9uIGN1cnJlbnRseSBiZWluZyBwcm9jZXNzZWQgYXMgc3RyaW5nLiBUaGlzIGlzIGFsbA0KICogY2hhcmFjdGVycyBiZXR3ZWVuIG9wZW5pbmcgYW5kIGNsb3NpbmcgcGFyZW4gZm9sbG93aW5nIGEgZnVuY3Rpb24gbmFtZSBpbg0KICogdUhlbHAoKSwgZS5nLg0KICoNCiAqICJTUUxTdGF0ZW1lbnQgW1Jvd1NlcGFyYXRvcl0sIFtDb2x1bW5TZXBhcmF0b3JdIg0KICoNCiAqIGZvciB0aGUgZnVuY3Rpb24gbmFtZSAidVNlbGVjdCIuDQogKi8NCnZhciBndl9mdW5jX3NpZ25hdHVyZSA9IG51bGw7DQoNCi8qKg0KICogTXVsdGktbGluZSBjb21tZW50IG9mIGZ1bmN0aW9uIGN1cnJlbnRseSBiZWluZyBwcm9jZXNzZWQgYXMgc3RyaW5nLiBUaGUNCiAqIHN0cmluZyBpbmNsdWRlcyBiZWdpbiBhbmQgZW5kIG9mIGNvbW1lbnQgbWFya2VycywgYW5kIGxpbmUgYnJlYWtzIGluIGNhc2UNCiAqIHRoZSBjb21tZW50IHNwYW5zIG11bHRpcGxlIGxpbmVzLiBEdWUgdG8gdGhlIGluY2x1ZGVkIGJlZ2luIGFuZCBlbmQgb2YNCiAqIGNvbW1lbnQgbWFya2Vycywgbm8gMToxIGV4YW1wbGUgY2FuIGJlIGluY2x1ZGVkIGhlcmU7IHRoZXkgd291bGQgYnJlYWsNCiAqIHRoaXMgY29tbWVudC4NCiAqLw0KdmFyIGd2X2Z1bmNfY29tbWVudCA9IG51bGw7DQoNCi8qKg0KICogamF2YS51dGlsLkFycmF5TGlzdCBvZiBhbGwgZnVuY3Rpb24gbmFtZXMgcmV0dXJuZWQgYnkgdUhlbHAoKTsgcmVxdWlyZWQNCiAqIHRvIGFkZCB0aGVtIGFzIHN5bWJvbHMgdG8ganMyLWFkZGl0aW9uYWwtZXh0ZXJucw0KICovDQp2YXIgZ29fZnVuY19uYW1lcyA9IG51bGw7DQoNCi8qKg0KICogamF2YS51dGlsLkFycmF5TGlzdCBvZiBhbGwgYXJndW1lbnQgbmFtZXMgb2YgdGhlIGZ1bmN0aW9uIGN1cnJlbnRseSBiZWluZw0KICogcHJvY2Vzc2VkOyBhbnkgYXJndW1lbnQgbmFtZXMgdGhhdCB3ZXJlIG5vdCBwbGFpbiB3b3JkcyAoaS5lLiBkaWRuJ3QNCiAqIG1hdGNoIHJlZ2V4IFxcdyspIGhhdmUgYWxyZWFkeSBiZWVuIHRyYW5zZm9ybWVkIGludG8gcGxhaW4gd29yZHMuDQogKi8NCnZhciBnb19mdW5jX2FyZ19uYW1lcyA9IG51bGw7DQoNCi8qKg0KICogamF2YS51dGlsLkFycmF5TGlzdCBvZiBqYXZhLmxhbmcuQm9vbGVhbiwgd2l0aCBpbmRleCBlcXVhbGl0eSB0bw0KICogZ29fZnVuY19hcmdfbmFtZXMuIEVhY2ggQm9vbGVhbiBpbmRpY2F0ZXMgd2hldGhlciB0aGUgY29ycmVzcG9uZGluZw0KICogZWxlbWVudCBvZiBnb19mdW5jX2FyZ19uYW1lcyBpcyBhbiBvcHRpb25hbCBhcmd1bWVudCAodHJ1ZSkgb3IgYQ0KICogbWFuZGF0b3J5IGFyZ3VtZW50IChmYWxzZSkuDQogKi8NCnZhciBnb19mdW5jX2FyZ19vcHQgPSBudWxsOw0KDQovLyBHTE9CQUwgQ09OU1RBTlRTOiBSRUdVTEFSIEVYUFJFU1NJT05TID09PT09PT09PT09PT09PT09PT09PT09PQ0KLyoqDQogKiBBIGNvbnN0YW50IHN0cmluZyBjb250YWluaW5nIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggZXhhY3RseSBvbmUNCiAqIGZ1bmN0aW9uIGFyZ3VtZW50IGluIHRoZSBjb250ZW50IHJldHVybmVkIGJ5IHVIZWxwKCkuIFVzZXMgYWRkaXRpb25hbA0KICogd2hpdGVzcGFjZSBhbmQgY29tbWVudHMgZm9yIGltcHJvdmVkIHJlYWRhYmlsaXR5DQogKg0KICogPT0mZ3Q7IHJlcXVpcmVzIGZsYWcgUGF0dGVybi5DT01NRU5UIHdoZW4gY29tcGlsZWQNCiAqLw0KdmFyIEdDX1JFR0VYX09ORV9BUkdVTUVOVA0KICAgICAgICA9ICIoICAgICAgICAgICAgICAgICAgICAgICAgICAjIGJlZ2luOiBvbmUgYXJndW1lbnQgXG4iDQogICAgICAgICsgIiAgKCBcXHcrICggXFxzK1xcdyspPyAgICkgICMgb25lIG9yIHR3byByZWd1bGFyIGFyZ3VtZW50IHdvcmRzIFxuIg0KICAgICAgICArICJ8ICggICAmbHQ7IChbXiZndDtdKykgICAgICZndDsgICApICAjIE9SIGFuZ2xlLWJyYWNrZXRlZCBvcHRpb25hbCBhcmcgXG4iDQogICAgICAgICsgInwgKCBcXFsgKFteXFxdXSspIFxcXSAgICkgICMgT1Igc3F1YXJlIGJyYWNrZXRlZCBvcHRpb25hbCBhcmcgXG4iDQogICAgICAgICsgIikgICAgICAgICAgICAgICAgICAgICAgICAgICMgZW5kOiBvbmUgYXJndW1lbnQgXG4iDQo7DQoNCi8qKg0KICogQSBjb25zdGFudCBzdHJpbmcgY29udGFpbmluZyB0aGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGV4YWN0bHkgb25lDQogKiBmdW5jdGlvbiwgaW5jbHVkaW5nIGl0cyBuYW1lLCBzaWduYXR1cmUgYW5kIGNvbW1lbnQgaW4gdGhlIGNvbnRlbnQNCiAqIHJldHVybmVkIGJ5IHVIZWxwKCkuIFVzZXMgYWRkaXRpb25hbCB3aGl0ZXNwYWNlIGFuZCBjb21tZW50cyBmb3IgaW1wcm92ZWQNCiAqIHJlYWRhYmlsaXR5DQogKg0KICogPT0mZ3Q7IHJlcXVpcmVzIGZsYWcgUGF0dGVybi5DT01NRU5UIHdoZW4gY29tcGlsZWQNCiAqLw0KdmFyIEdDX1JFR0VYX09ORV9GVU5DVElPTg0KICAgICAgICA9ICIoXFx3KykgICAgICAgICAgICAgICAgICAgICMgZnVuY3Rpb24gbmFtZSBcbiINCiAgICAgICAgKyAiXFxzKiBcXCo/IFxccyogICAgICAgICAgICAjIHdvcmthcm91bmQgZm9yIGJ1Z2d5IHVFeHRFbmNvZGUgXG4iDQogICAgICAgICsgIiggXFwoICAgICAgICAgICAgICAgICAgICAgIyBiZWdpbjogb3B0LiBzaWduYXR1cmUgaW5jbC4gcGFyZW5zIFxuIg0KICAgICAgICArICIoICAgICAgICAgICAgICAgICAgICAgICAgICMgYmVnaW46IHNpZ25hdHVyZSAgZXhjbC4gcGFyZW5zIFxuIg0KICAgICAgICArICIoICAgICAgICAgICAgICAgICAgICAgICAgICMgYmVnaW46IHplcm8gb3IgbW9yZSBhcmd1bWVudHMgIFxuIg0KICAgICAgICArICJcXHMqICw/IFxccyogICAgICAgICAgICAgICMgb3B0LiBjb21tYSBzdXJyb3VuZGVkIGJ5IG9wdC4gd2hpdHNwYWNlIFxuIg0KICAgICAgICArIEdDX1JFR0VYX09ORV9BUkdVTUVOVA0KLy8gVE9ETzogcHJpbnQoKSBkb2Vzbid0IHdvcmsgeWV0DQovLyAgICAgICsgIlxccyogKCBcXC57M30gKT8gXFxzKiAgICAgIyBvcHRpb25hbCBlbGxpcHNpcyBmb3IgdmFyaWFkaWMgZnVuY3Rpb25zIFxuIg0KICAgICAgICArICJcXHMqICw/IFxccyogICAgICAgICAgICAgICMgb3B0LiBjb21tYSBzdXJyb3VuZGVkIGJ5IG9wdC4gd2hpdHNwYWNlIFxuIg0KICAgICAgICArICIpKiAgICAgICAgICAgICAgICAgICAgICAgICMgZW5kOiB6ZXJvIG9yIG1vcmUgYXJndW1lbnRzICBcbiINCiAgICAgICAgKyAiKSAgICAgICAgICAgICAgICAgICAgICAgICAjIGVuZDogc2lnbmF0dXJlICBleGNsLiBwYXJlbnMgXG4iDQogICAgICAgICsgIiAgXFwpezEsMn0gKT8gICAgICAgICAgICAgIyBlbmQ6IG9wdC4gc2lnbmF0dXJlIGluY2wuIHBhcmVucywgd29ya2Fyb3VuZCB1RXhwYW5kU3RyaW5nIFxuIg0KICAgICAgICArICJcXHMqIDs/ICAgICAgICAgICAgICAgICAgICMgb3B0LiB3aGl0ZXNwYWNlIGFuZCBzZW1pY29sb24gXG4iDQogICAgICAgICsgIiggKCBcXHMqIC9cXCogLio/IFxcKi8gXFxzKiApKyApPyAjIG9wdGlvbmFsIG11bHRpLWxpbmUgY29tbWVudCAocmVsdWN0YW50IHF1YW50aWZpZXIhKSBcbiINCjsNCg0KLyoqDQogKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24uIFRoZSBwdXJwb3NlIG9mIHRoaXMgc291cmNlIGZpbGUNCiAqIGlzIHRvIGRlZmluZSB0aGUgYWJvdmUgZ2xvYmFsIHZhcmlhYmxlcyBvbmx5Lg0KICoNCiAqIFBhcmFtZXRlcnM6DQogKiAgIG5vbmUNCiAqDQogKiBSZXR1cm5zOg0KICogICBub3RoaW5nDQogKi8NCmZ1bmN0aW9uIGlkbWFjc19idWlsdGluc19kZWZpbmVfZ2xvYmFscygpe30NCjwvbXg6Q29kZT4NCiAgICAgICAgICAgIDwvbXg6RnVuY3Rpb24+DQogICAgICAgICAgICA8bXg6RnVuY3Rpb24gRW5hYmxlZD0iVFJVRSIgU2NyaXB0PSJKU2NyaXB0IiBuYW1lPSJpZG1hY3NfcmV0dXJuX3VoZWxwIj4NCiAgICAgICAgICAgICAgIDxteDpDb2RlPi8vIENvcHlyaWdodCAyMDEzIExhbWJlcnQgQm9za2FtcA0KLy8NCi8vIEF1dGhvcjogTGFtYmVydCBCb3NrYW1wICZsdDtsYW1iZXJ0QGJvc2thbXAtY29uc3VsdGluZy5jb20ubm9zcGFtJmd0Ow0KLy8NCi8vIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIElETWFjcy4NCi8vDQovLyBJRE1hY3MgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQ0KLy8gaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkNCi8vIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yDQovLyAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLg0KLy8NCi8vIElETWFjcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLA0KLy8gYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YNCi8vIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGUNCi8vIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuDQovLw0KLy8gWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UNCi8vIGFsb25nIHdpdGggSURNYWNzLiAgSWYgbm90LCBzZWUgJmx0O2h0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8mZ3Q7Lg0KDQovKioNCiAqIFJldHVybnMgbmFtZXMsIHNpZ25hdHVyZXMgYW5kIGRvY3VtZW50YXRpb24gb2YgYnVpbHQtaW4NCiAqIGZ1bmN0aW9ucyBieSBjYWxsaW5nIHVIZWxwKCkNCiAqDQogKiBQYXJhbWV0ZXJzOg0KICogICBpdl9pbmNsdWRlX3VuZG9jdW1lbnRlZCAtDQogKiAgICAgT3B0aW9uYWwgYm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgaW50ZXJuYWwNCiAqICAgICBmdW5jdGlvbnMgdGhhdCBhcmUgc3VwcG9zZWQgdG8gcmVtYWluIHVuZG9jdW1lbnRlZA0KICogICAgIHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0IG9yIG5vdC4gVGFrZQ0KICogICAgIGNhcmUgb2Ygbm90IHJlbHlpbmcgb24gdGhlc2UgZnVuY3Rpb25zIGZvciBwcm9kdWN0aW9uLg0KICoNCiAqIFJldHVybnM6DQogKiAgIE11bHRpLWxpbmUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGRvY3VtZW50YXRpb24NCiAqLw0KDQpmdW5jdGlvbiBpZG1hY3NfcmV0dXJuX3VoZWxwKGl2X2luY2x1ZGVfdW5kb2N1bWVudGVkKXsNCiAgICByZXR1cm4gdUhlbHAoaXZfaW5jbHVkZV91bmRvY3VtZW50ZWQpOw0KfS8vaWRtYWNzX3JldHVybl91aGVscA0KPC9teDpDb2RlPg0KICAgICAgICAgICAgPC9teDpGdW5jdGlvbj4NCiAgICAgICAgICAgIDxteDpGdW5jdGlvbiBFbmFibGVkPSJUUlVFIiBTY3JpcHQ9IkpTY3JpcHQiIG5hbWU9ImlkbWFjc19idWlsdGluc19wYXJzZV9zaWduYXR1cmUiPg0KICAgICAgICAgICAgICAgPG14OkNvZGU+Ly8gQ29weXJpZ2h0IDIwMTMgTGFtYmVydCBCb3NrYW1wDQovLw0KLy8gQXV0aG9yOiBMYW1iZXJ0IEJvc2thbXAgJmx0O2xhbWJlcnRAYm9za2FtcC1jb25zdWx0aW5nLmNvbS5ub3NwYW0mZ3Q7DQovLw0KLy8gVGhpcyBmaWxlIGlzIHBhcnQgb2YgSURNYWNzLg0KLy8NCi8vIElETWFjcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5DQovLyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQ0KLy8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3INCi8vIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uDQovLw0KLy8gSURNYWNzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsDQovLyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZg0KLy8gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQ0KLy8gR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCi8vDQovLyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQ0KLy8gYWxvbmcgd2l0aCBJRE1hY3MuICBJZiBub3QsIHNlZSAmbHQ7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLyZndDsuDQoNCi8qKg0KICogUGFyc2VzIHRoZSBzaWduYXR1cmUgc3RyaW5nIG9mIHRoZSBjdXJyZW50IGZ1bmN0aW9uLCBhbmQgc3RvcmVzIHRoZQ0KICogYXJndW1lbnQgbmFtZXMgZm91bmQgaW4gdGhlIGdsb2JhbCBsaXN0IGdvX2Z1bmNfYXJnX25hbWVzLiBGb3IgZWFjaA0KICogYXJndW1lbnQgZm91bmQsIGEgZmxhZyB3aWxsIGJlIHN0b3JlZCBpbiBnb19mdW5jX2FyZ19vcHQsIGluZGljYXRpbmcNCiAqIHdoZXRoZXIgdGhlIGFyZ3VtZW50IGlzIG9wdGlvbmFsIG9yIG5vdC4NCiAqDQogKiBQcmVjb25kaXRpb25zOg0KICogICAxLiBHbG9iYWwgZ3ZfZnVuY19uYW1lIGNvbnRhaW5zIGN1cnJlbnQgZnVuY3Rpb24gbmFtZSAoZm9yIHRyYWNpbmcpDQogKiANCiAqICAgMi4gR2xvYmFsIGd2X2Z1bmNfc2lnbmF0dXJlIGNvbnRhaW5zIHRoYXQgZnVuY3Rpb25zIHNpZ25hdHVyZQ0KICogICAgICBhcyBhIHN0cmluZywgYnV0IHdpdGhvdXQgYW55IHN1cnJvdW5kaW5nIHBhcmVudGhlc2VzDQogKg0KICogUGFyYW1ldGVyczoNCiAqICAgbm9uZQ0KICoNCiAqIFJldHVybnM6DQogKiAgIG5vdGhpbmcNCiAqLw0KZnVuY3Rpb24gaWRtYWNzX2J1aWx0aW5zX3BhcnNlX3NpZ25hdHVyZSgpICB7DQogICAgLy8gSWYgY3VycmVudCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgYW55IGFyZ3VtZW50cywgd2UncmUgZG9uZQ0KICAgIGlmIChndl9mdW5jX3NpZ25hdHVyZSA9PSBudWxsKSB7DQogICAgICAgIGdvX2Z1bmNfYXJnX25hbWVzID0gbnVsbDsNCiAgICAgICAgZ29fZnVuY19hcmdfb3B0ID0gbnVsbDsNCiAgICAgICAgcmV0dXJuOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gRVhJVA0KICAgIH0NCg0KICAgIC8vIFJlc2V0IGdsb2JhbCBsaXN0IG9mIGFyZ3VtZW50IG5hbWVzIHRvIGVtcHR5IGxpc3QNCiAgICBnb19mdW5jX2FyZ19uYW1lcyA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0KCk7DQoNCiAgICAvLyBSZXNldCBnbG9iYWwgbGlzdCBvZiAiaXMgb3B0aW9uYWwiIGZsYWdzIHRvIGVtcHR5IGxpc3QNCiAgICBnb19mdW5jX2FyZ19vcHQgPSBuZXcgamF2YS51dGlsLkFycmF5TGlzdCgpOw0KDQogICAgdmFyIGxvX29uZV9hcmdfcGF0dGVybg0KICAgICAgICAgICAgPSBqYXZhLnV0aWwucmVnZXguUGF0dGVybi5jb21waWxlKEdDX1JFR0VYX09ORV9BUkdVTUVOVCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqYXZhLnV0aWwucmVnZXguUGF0dGVybi5DT01NRU5UUyk7DQogICAgdmFyIGxvX29uZV9hcmdfbWF0Y2hlciA9IGxvX29uZV9hcmdfcGF0dGVybg0KICAgICAgICAgICAgLm1hdGNoZXIoZ3ZfZnVuY19zaWduYXR1cmUpOw0KDQogICAgd2hpbGUgKGxvX29uZV9hcmdfbWF0Y2hlci5maW5kKCkpIHsNCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgJmx0Oz0gbG9fb25lX2FyZ19tYXRjaGVyLmdyb3VwQ291bnQoKTsgKytpKSB7DQogICAgICAgICAgICBpZG1hY3NfdHJhY2UoZ3ZfZnVuY19uYW1lICsgIjogbG9fb25lX2FyZ19tYXRjaGVyLmdyb3VwKCIgKyBpDQogICAgICAgICAgICAgICAgICAgICAgICAgKyAiKT1cIiIgKyBsb19vbmVfYXJnX21hdGNoZXIuZ3JvdXAoaSkgKyAiXCIiKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIEEgcmVndWxhciBhcmd1bWVudCBlLmcuICJhcmdfbmFtZSIgb3IgImFyZ190eXBlIGFyZ19uYW1lIg0KICAgICAgICB2YXIgbHZfcmVndWxhcl9hcmdfbmFtZSA9IGxvX29uZV9hcmdfbWF0Y2hlci5ncm91cCgyKTsNCiAgICAgICAgaWRtYWNzX3RyYWNlKGd2X2Z1bmNfbmFtZSArICI6IGx2X3JlZ3VsYXJfYXJnX25hbWU9XCIiDQogICAgICAgICAgICAgICAgICAgICArIGx2X3JlZ3VsYXJfYXJnX25hbWUgKyAiXCIiKTsNCg0KICAgICAgICAvLyBBbiBvcHRpb25hbCBhcmd1bWVudCBzdXJyb3VuZGVkIGJ5IGFuZ2xlIGJyYWNrZXRzICwgZS5nLg0KICAgICAgICAvLyAmbHQ7YXJnX25hbWUmZ3Q7DQogICAgICAgIHZhciBsdl9hbmdsZV9hcmdfbmFtZSA9IGxvX29uZV9hcmdfbWF0Y2hlci5ncm91cCg1KTsNCiAgICAgICAgaWRtYWNzX3RyYWNlKGd2X2Z1bmNfbmFtZSArICI6IGx2X2FuZ2xlX2FyZ19uYW1lPVwiIg0KICAgICAgICAgICAgICAgICAgICAgKyBsdl9hbmdsZV9hcmdfbmFtZSArICJcIiIpOw0KDQogICAgICAgIC8vIEFuIG9wdGlvbmFsIGFyZ3VtZW50IHN1cnJvdW5kZWQgYnkgc3F1YXJlIGJyYWNrZXRzICwgZS5nLg0KICAgICAgICAvLyBbYXJnX25hbWVdDQogICAgICAgIHZhciBsdl9zcXVhcmVfYXJnX25hbWUgPSBsb19vbmVfYXJnX21hdGNoZXIuZ3JvdXAoNyk7DQogICAgICAgIGlkbWFjc190cmFjZShndl9mdW5jX25hbWUgKyAiOiBsdl9zcXVhcmVfYXJnX25hbWU9XCIiDQogICAgICAgICAgICAgICAgICAgICArIGx2X3NxdWFyZV9hcmdfbmFtZSArICJcIiIpOw0KDQogICAgICAgIHZhciBsdl9hcmd1bWVudF9uYW1lDQogICAgICAgICAgICAgICAgPSBsdl9yZWd1bGFyX2FyZ19uYW1lICE9IG51bGwgPyBsdl9yZWd1bGFyX2FyZ19uYW1lDQogICAgICAgICAgICAgICAgOiBsdl9hbmdsZV9hcmdfbmFtZSAhPSBudWxsID8gbHZfYW5nbGVfYXJnX25hbWUNCiAgICAgICAgICAgICAgICA6IGx2X3NxdWFyZV9hcmdfbmFtZQ0KICAgICAgICA7DQoNCiAgICAgICAgLy8gUmVwbGFjZSBzZXF1ZW5jZXMgb2Ygd2hpdGUgc3BhY2UgaW4gYXJndW1lbnQgbmFtZXMgd2l0aCBvbmUNCiAgICAgICAgLy8gdW5kZXJzY29yZQ0KICAgICAgICBsdl9hcmd1bWVudF9uYW1lID0gbHZfYXJndW1lbnRfbmFtZS5yZXBsYWNlQWxsKCJcXHMrIiwgIl8iKTsNCg0KICAgICAgICAvLyBSZW1vdmUgYW55IGlsbC1wb3NpdGlvbmVkIGNvbW1hcyBmcm9tIGFyZ3VtZW50IG5hbWVzDQogICAgICAgIGx2X2FyZ3VtZW50X25hbWUgPSBsdl9hcmd1bWVudF9uYW1lLnJlcGxhY2VBbGwoIiwiLCAiIik7DQoNCiAgICAgICAgaWRtYWNzX3RyYWNlKGd2X2Z1bmNfbmFtZSArICI6IGx2X2FyZ3VtZW50X25hbWU9XCIiDQogICAgICAgICAgICAgICAgICAgICArIGx2X2FyZ3VtZW50X25hbWUgKyAiXCIiKTsNCg0KICAgICAgICB2YXIgbHZfYXJndW1lbnRfb3B0ID0gbHZfYW5nbGVfYXJnX25hbWUgIT0gbnVsbA0KICAgICAgICAgICAgICAgIHx8IGx2X3NxdWFyZV9hcmdfbmFtZSAhPSBudWxsOw0KDQogICAgICAgIGlkbWFjc190cmFjZShndl9mdW5jX25hbWUgKyAiOiBsdl9hcmd1bWVudF9vcHQ9XCIiDQogICAgICAgICAgICAgICAgICAgICArIGx2X2FyZ3VtZW50X29wdCArICJcIiIpOw0KDQogICAgICAgIGdvX2Z1bmNfYXJnX25hbWVzLmFkZChsdl9hcmd1bWVudF9uYW1lKTsNCiAgICAgICAgZ29fZnVuY19hcmdfb3B0LmFkZChuZXcgamF2YS5sYW5nLkJvb2xlYW4obHZfYXJndW1lbnRfb3B0KSk7DQogICAgfS8vIHdoaWxlKGxvX29uZV9hcmdfbWF0Y2hlci5maW5kKCkpDQoNCiAgICBpZG1hY3NfdHJhY2UoZ3ZfZnVuY19uYW1lICsgIjogZ29fZnVuY19hcmdfbmFtZXMgPSAiDQogICAgICAgICAgICAgICAgICsgZ29fZnVuY19hcmdfbmFtZXMpOw0KICAgIGlkbWFjc190cmFjZShndl9mdW5jX25hbWUgKyAiOiBnb19mdW5jX2FyZ19vcHQgICA9ICIgKyBnb19mdW5jX2FyZ19vcHQpOw0KDQp9Ly9pZG1hY3NfYnVpbHRpbnNfcGFyc2Vfc2lnbmF0dXJlDQo8L214OkNvZGU+DQogICAgICAgICAgICA8L214OkZ1bmN0aW9uPg0KICAgICAgICAgICAgPG14OkZ1bmN0aW9uIEVuYWJsZWQ9IlRSVUUiIFNjcmlwdD0iSlNjcmlwdCIgbmFtZT0iaWRtYWNzX2J1aWx0aW5zX3dyaXRlX3NuaXBwZXQiPg0KICAgICAgICAgICAgICAgPG14OkNvZGU+Ly8gQ29weXJpZ2h0IDIwMTMgTGFtYmVydCBCb3NrYW1wDQovLw0KLy8gQXV0aG9yOiBMYW1iZXJ0IEJvc2thbXAgJmx0O2xhbWJlcnRAYm9za2FtcC1jb25zdWx0aW5nLmNvbS5ub3NwYW0mZ3Q7DQovLw0KLy8gVGhpcyBmaWxlIGlzIHBhcnQgb2YgSURNYWNzLg0KLy8NCi8vIElETWFjcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5DQovLyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQ0KLy8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3INCi8vIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uDQovLw0KLy8gSURNYWNzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsDQovLyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZg0KLy8gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQ0KLy8gR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCi8vDQovLyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQ0KLy8gYWxvbmcgd2l0aCBJRE1hY3MuICBJZiBub3QsIHNlZSAmbHQ7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLyZndDsuDQoNCi8qKg0KICogV3JpdGUgdGhlIHNuaXBwZXQgZmlsZSBmb3IgZnVuY3Rpb24gY3VycmVudGx5IGJlaW5nIHByb2Nlc3NlZC4NCiAqDQogKiBQcmVjb25kaXRpb25zOg0KICogICAxLiBHbG9iYWwgZ3ZfZnVuY19uYW1lIGNvbnRhaW5zIGZ1bmN0aW9uIG5hbWUNCiAqDQogKiAgIDIuIEdsb2JhbCBnb19mdW5jX2FyZ19uYW1lcyBjb250YWlucyBqYXZhLnV0aWwuTGlzdA0KICogICAgICBvZiBhcmd1bWVudCBuYW1lcywgb3IgaXMgbnVsbCBmb3IgZnVuY3Rpb25zDQogKiAgICAgIHdpdGggZW1wdHkgc2lnbmF0dXJlLg0KICoNCiAqICAgMy4gR2xvYmFsIGdvX2Z1bmNfYXJnX29wdCBjb250YWlucyBqYXZhLnV0aWwuTGlzdA0KICogICAgICBvZiBqYXZhLmxhbmcuQm9vbGVhbiBmbGFncyBpbmRpY2F0aW5nIHdoZXRoZXINCiAqICAgICAgdGhlIGluZGV4LWNvcnJlc3BvbmRpbmcgZWxlbWVudCBvZiBnb19mdW5jX2FyZ19uYW1lcw0KICogICAgICBpcyBvcHRpb25hbCAodHJ1ZSkgb3IgbWFuZGF0b3J5IChmYWxzZSkgYXJndW1lbnQuDQogKg0KICogUGFyYW1ldGVyczoNCiAqICAgaXZfc25pcHBldHNfZGlyDQogKiAgICAgLSBzdHJpbmcgbmFtZSBvZiBkaXJlY3Rvcnkgd2hlcmUgdG8gZ2VuZXJhdGUgc25pcHBldCBmaWxlDQogKg0KICogUmV0dXJuczoNCiAqICAgbm90aGluZw0KICovDQpmdW5jdGlvbiBpZG1hY3NfYnVpbHRpbnNfd3JpdGVfc25pcHBldChpdl9zbmlwcGV0c19kaXIpIHsNCiAgICB2YXIgTENfU0NSSVBUID0gImlkbWFjc19idWlsdGluc193cml0ZV9zbmlwcGV0OiAiOw0KICAgIGlkbWFjc190cmFjZShMQ19TQ1JJUFQgKyAiaXZfc25pcHBldHNfZGlyID0gIiArIGl2X3NuaXBwZXRzX2Rpcik7DQogICAgDQogICAgdmFyIGxvX3NuaXBwZXRzX2RpciA9IG5ldyBqYXZhLmlvLkZpbGUoaXZfc25pcHBldHNfZGlyKTsNCiAgICB2YXIgbG9fc25pcHBldF9maWxlID0gbmV3IGphdmEuaW8uRmlsZShsb19zbmlwcGV0c19kaXIsIGd2X2Z1bmNfbmFtZSk7DQogICAgdmFyIGxvX3NuaXBwZXRfZm9zID0gbmV3IGphdmEuaW8uRmlsZU91dHB1dFN0cmVhbShsb19zbmlwcGV0X2ZpbGUpOw0KICAgIHZhciBsb19zbmlwcGV0X3dyaXRlciA9IG5ldyBqYXZhLmlvLlByaW50V3JpdGVyKGxvX3NuaXBwZXRfZm9zKTsNCg0KICAgIGxvX3NuaXBwZXRfd3JpdGVyLnByaW50bG4oIiMgbmFtZTogIiArIGd2X2Z1bmNfbmFtZSk7DQogICAgbG9fc25pcHBldF93cml0ZXIucHJpbnRsbigiIyAtLSIpOw0KICAgIGxvX3NuaXBwZXRfd3JpdGVyLnByaW50KGd2X2Z1bmNfbmFtZSArICIoIik7DQoNCiAgICAvLyBQcm9jZXNzIGFyZ3VtZW50cyBvbmx5IGlmIGZ1bmN0aW9uIHJlYWxseSBoYXMgYXJndW1lbnRzDQogICAgaWYgKGdvX2Z1bmNfYXJnX25hbWVzICE9IG51bGwpIHsNCiAgICAgICAgLy8gT3ZlcmFsbCBudW1iZXIgb2YgYXJndW1lbnRzIGluIHNpZ25hdHVyZQ0KICAgICAgICB2YXIgbHZfYXJnc19jb3VudCA9IGdvX2Z1bmNfYXJnX25hbWVzLnNpemUoKTsNCg0KICAgICAgICBmb3IgKHZhciBpID0gMDsgaSAmbHQ7IGx2X2FyZ3NfY291bnQ7ICsraSkgew0KICAgICAgICAgICAgLy8gVGhlIG51bWJlciBvZiB0aGUgY3VycmVudCBhcmd1bWVudCwgc3RhcnRpbmcgd2l0aCAxDQogICAgICAgICAgICB2YXIgbHZfZnVuY19hcmdfbnVtID0gaSArIDE7DQogICAgICAgICAgICB2YXIgbHZfZnVuY19hcmdfbmFtZSA9IGdvX2Z1bmNfYXJnX25hbWVzLmdldChpKTsNCiAgICAgICAgICAgIHZhciBsdl9mdW5jX2FyZ19vcHQgPSBnb19mdW5jX2FyZ19vcHQuZ2V0KGkpLmJvb2xlYW5WYWx1ZSgpOw0KDQogICAgICAgICAgICBpZiAobHZfYXJnc19jb3VudCAmZ3Q7IDEpIHsNCiAgICAgICAgICAgICAgICBsb19zbmlwcGV0X3dyaXRlci5wcmludGxuKCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChsdl9mdW5jX2FyZ19vcHQpIHsNCiAgICAgICAgICAgICAgICBsb19zbmlwcGV0X3dyaXRlci5wcmludCgiLyoiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChsdl9mdW5jX2FyZ19udW0gJmd0OyAxKSB7DQogICAgICAgICAgICAgICAgbG9fc25pcHBldF93cml0ZXIucHJpbnQoIiwiKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICghbHZfZnVuY19hcmdfb3B0KSB7DQogICAgICAgICAgICAgICAgbG9fc25pcHBldF93cml0ZXIucHJpbnQoIiR7IiArIGx2X2Z1bmNfYXJnX251bSArICI6Iik7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGxvX3NuaXBwZXRfd3JpdGVyLnByaW50KGx2X2Z1bmNfYXJnX25hbWUpOw0KDQogICAgICAgICAgICBpZiAoIWx2X2Z1bmNfYXJnX29wdCkgew0KICAgICAgICAgICAgICAgIGxvX3NuaXBwZXRfd3JpdGVyLnByaW50KCJ9Iik7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIGxvX3NuaXBwZXRfd3JpdGVyLnByaW50KCIqLyIpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgIH0vLyBmb3IgKHZhciBpID0gMDsgaSAmbHQ7IGx2X2FyZ3NfY291bnQ7ICsraSkNCg0KICAgICAgICAvLyBQdXQgY2xvc2luZyBwYXJlbiBvbiBhIHNlcGFyYXRlIGxpbmUsDQogICAgICAgIC8vIGJ1dCBvbmx5IGZvciBtdWx0aS1hcmd1bWVudCBmdW5jdGlvbnMNCiAgICAgICAgaWYgKGx2X2FyZ3NfY291bnQgJmd0OyAxKSB7DQogICAgICAgICAgICBsb19zbmlwcGV0X3dyaXRlci5wcmludGxuKCk7DQogICAgICAgIH0NCiAgICB9Ly8gaWYoZ3RfZnVuY19hcmdfbmFtZXMgIT0gbnVsbCkgew0KDQogICAgLy8gQWx3YXlzIGFkZCBjbG9zaW5nIHNpZ25hdHVyZSBwYXJlbiwNCiAgICAvLyBmb2xsb3dlZCBieSAiZW5kIG9mIHNuaXBwZXQiIG1hcmtlcg0KICAgIGxvX3NuaXBwZXRfd3JpdGVyLnByaW50KCIpJDAiKTsNCg0KICAgIC8vIEZpbmFsaXplIGN1cnJlbnQgc25pcHBldCBmaWxlDQogICAgbG9fc25pcHBldF93cml0ZXIuZmx1c2goKTsNCiAgICBsb19zbmlwcGV0X3dyaXRlci5jbG9zZSgpOw0KDQp9Ly9pZG1hY3NfYnVpbHRpbnNfd3JpdGVfc25pcHBldDwvbXg6Q29kZT4NCiAgICAgICAgICAgIDwvbXg6RnVuY3Rpb24+DQogICAgICAgICAgICA8bXg6RnVuY3Rpb24gRW5hYmxlZD0iVFJVRSIgU2NyaXB0PSJKU2NyaXB0IiBuYW1lPSJpZG1hY3NfYnVpbHRpbnNfY3JlYXRlX2RpY3Rpb25hcnkiPg0KICAgICAgICAgICAgICAgPG14OkNvZGU+Ly8gQ29weXJpZ2h0IDIwMTMgTGFtYmVydCBCb3NrYW1wDQovLw0KLy8gQXV0aG9yOiBMYW1iZXJ0IEJvc2thbXAgJmx0O2xhbWJlcnRAYm9za2FtcC1jb25zdWx0aW5nLmNvbS5ub3NwYW0mZ3Q7DQovLw0KLy8gVGhpcyBmaWxlIGlzIHBhcnQgb2YgSURNYWNzLg0KLy8NCi8vIElETWFjcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5DQovLyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQ0KLy8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3INCi8vIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uDQovLw0KLy8gSURNYWNzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsDQovLyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZg0KLy8gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQ0KLy8gR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCi8vDQovLyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQ0KLy8gYWxvbmcgd2l0aCBJRE1hY3MuICBJZiBub3QsIHNlZSAmbHQ7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLyZndDsuDQoNCi8qKg0KICogQ3JlYXRlIGEgZGljdGlvbmFyeSBmaWxlIG9mIGFsbCBidWlsdC1pbiBmdW5jdGlvbiBuYW1lcywgaS5lLiBhIGZpbGUgdGhhdA0KICogY29udGFpbnMgdGhlIG5hbWUgb2YgZWFjaCBidWlsdC1pbiBmdW5jdGlvbiBvbiBhIHNlcGFyYXRlIGxpbmUuDQogKg0KICogVGhpcyBmaWxlIHdpbGwgYmUgdXNlZCBpbnNpZGUgRW1hY3MgdG8gcG9wdWxhdGUgdGhlIHZhcmlhYmxlDQogKiBqczItYWRkaXRpb25hbC1leHRlcm5zLCB3aGljaCB3aWxsIG1ha2UganMyLW1vZGUgcmVjb2duaXplIHRoZXNlIGZ1bmN0aW9uDQogKiBuYW1lcyBhcyBleHRlcm5hbGx5IGRlY2xhcmVkLCBhbmQgbm90IHByb2R1Y2UgYW55IHN5bnRheCB3YXJuaW5ncyBmb3INCiAqIHRoZW0uDQogKg0KICogUGFyYW1ldGVyczoNCiAqICAgaXZfZGljdGlvbmFyeV9maWxlIC0gbmFtZSBvZiBkaWN0aW9uYXJ5IGZpbGUgYXMgc3RyaW5nDQogKg0KICogUmV0dXJuczoNCiAqICAgbm90aGluZw0KICovDQpmdW5jdGlvbiBpZG1hY3NfYnVpbHRpbnNfY3JlYXRlX2RpY3Rpb25hcnkoaXZfZGljdGlvbmFyeV9maWxlKSB7DQogICAgdmFyIExDX1NDUklQVCA9ICJpZG1hY3NfYnVpbHRpbnNfY3JlYXRlX2RpY3Rpb25hcnk6ICI7DQogICAgaWRtYWNzX3RyYWNlKExDX1NDUklQVCArICJpdl9kaWN0aW9uYXJ5X2ZpbGUgPSAiICsgaXZfZGljdGlvbmFyeV9maWxlKTsNCiAgICANCiAgICB2YXIgbG9fZGljdGlvbmFyeV9maWxlDQoJICAgID0gbmV3IGphdmEuaW8uRmlsZShpdl9kaWN0aW9uYXJ5X2ZpbGUpOw0KICAgIHZhciBsb19kaWN0aW9uYXJ5X2Zvcw0KCSAgICA9IG5ldyBqYXZhLmlvLkZpbGVPdXRwdXRTdHJlYW0obG9fZGljdGlvbmFyeV9maWxlKTsNCiAgICB2YXIgbG9fZGljdGlvbmFyeV93cml0ZXINCgkgICAgPSBuZXcgamF2YS5pby5QcmludFdyaXRlcihsb19kaWN0aW9uYXJ5X2Zvcyk7DQoNCiAgICBmb3IgKHZhciBpID0gMDsgaSAmbHQ7IGdvX2Z1bmNfbmFtZXMuc2l6ZSgpOyArK2kpIHsNCiAgICAgICAgdmFyIGx2X2Z1bmNfbmFtZSA9IGdvX2Z1bmNfbmFtZXMuZ2V0KGkpOw0KICAgICAgICBsb19kaWN0aW9uYXJ5X3dyaXRlci5wcmludGxuKGx2X2Z1bmNfbmFtZSk7DQogICAgfS8vIGZvcg0KDQogICAgbG9fZGljdGlvbmFyeV93cml0ZXIuZmx1c2goKTsNCiAgICBsb19kaWN0aW9uYXJ5X3dyaXRlci5jbG9zZSgpOw0KfS8vaWRtYWNzX2J1aWx0aW5zX2NyZWF0ZV9kaWN0aW9uYXJ5PC9teDpDb2RlPg0KICAgICAgICAgICAgPC9teDpGdW5jdGlvbj4NCiAgICAgICAgICAgIDxteDpGdW5jdGlvbiBFbmFibGVkPSJUUlVFIiBTY3JpcHQ9IkpTY3JpcHQiIG5hbWU9ImlkbWFjc19idWlsdGluc19yZWFkX2hlbHBfZmlsZSI+DQogICAgICAgICAgICAgICA8bXg6Q29kZT4vLyBDb3B5cmlnaHQgMjAxMyBMYW1iZXJ0IEJvc2thbXANCi8vDQovLyBBdXRob3I6IExhbWJlcnQgQm9za2FtcCAmbHQ7bGFtYmVydEBib3NrYW1wLWNvbnN1bHRpbmcuY29tLm5vc3BhbSZndDsNCi8vDQovLyBUaGlzIGZpbGUgaXMgcGFydCBvZiBJRE1hY3MuDQovLw0KLy8gSURNYWNzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkNCi8vIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQovLyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcg0KLy8gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4NCi8vDQovLyBJRE1hY3MgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwNCi8vIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mDQovLyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlDQovLyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KLy8NCi8vIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQovLyBhbG9uZyB3aXRoIElETWFjcy4gIElmIG5vdCwgc2VlICZsdDtodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvJmd0Oy4NCg0KLyoqDQogKiBSZWFkcyB0aGUgd2hvbGUgY29udGVudCBvZiB0aGUgZmlsZSBuYW1lIHBhc3NlZCB2aWEgaXZfaGVscF9maWxlDQogKiBpbnRvIHRoZSBnbG9iYWwgc3RyaW5nIHZhcmlhYmxlIGd2X2hlbHAuDQogKg0KICogUHJlY29uZGl0aW9uczogDQogKiAxLiBGdW5jdGlvbiBpZG1hY3NfYnVpbHRpbnNfZGVmaW5lX2dsb2JhbHMoKSBoYXMgYmVlbiBjYWxsZWQNCiAqICAgIHNvIHRoYXQgZ2xvYmFsIHZhcmlhYmxlIGd2X2hlbHAgcmVhbGx5IGV4aXN0cy4NCiAqDQogKiBQYXJhbWV0ZXJzOg0KICogICBpdl9oZWxwX2ZpbGUgLSBzdHJpbmcgbmFtZSBvZiBmaWxlIHRvIHJlYWQNCiAqDQogKiBSZXR1cm5zOg0KICogICBub3RoaW5nDQogKi8NCmZ1bmN0aW9uIGlkbWFjc19idWlsdGluc19yZWFkX2hlbHBfZmlsZShpdl9oZWxwX2ZpbGUpew0KICAgIHZhciBMQ19TQ1JJUFQgPSAiaWRtYWNzX2J1aWx0aW5zX3JlYWRfaGVscF9maWxlOiAiOw0KICAgIGlkbWFjc190cmFjZShMQ19TQ1JJUFQgKyAiaXZfaGVscF9maWxlID0gIiArIGl2X2hlbHBfZmlsZSk7DQogICAgDQogICAgdmFyIGxvX2hlbHAgPSBuZXcgamF2YS51dGlsLkFycmF5TGlzdCgpOw0KICAgIHZhciBsb19oZWxwX3NiID0gbmV3IGphdmEubGFuZy5TdHJpbmdCdWZmZXIoKTsNCiAgICB2YXIgbG9faGVscF9yZWFkZXINCgkgICAgPSBuZXcgamF2YS5pby5CdWZmZXJlZFJlYWRlcigNCgkJbmV3IGphdmEuaW8uRmlsZVJlYWRlcihpdl9oZWxwX2ZpbGUpKTsNCg0KICAgIHZhciBsdl9saW5lID0gbnVsbDsNCg0KICAgIGRvIHsNCiAgICAgICAgbHZfbGluZSA9IGxvX2hlbHBfcmVhZGVyLnJlYWRMaW5lKCk7DQogICAgICAgIGlmIChsdl9saW5lID09IG51bGwpIHsNCiAgICAgICAgICAgIGJyZWFrOyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gRVhJVA0KICAgICAgICB9DQogICAgICAgIGxvX2hlbHAuYWRkKGx2X2xpbmUpOw0KICAgICAgICBsb19oZWxwX3NiLmFwcGVuZChsdl9saW5lKTsNCiAgICB9IHdoaWxlICh0cnVlKTsNCg0KICAgIGxvX2hlbHBfcmVhZGVyLmNsb3NlKCk7DQoNCiAgICBndl9oZWxwID0gbG9faGVscF9zYi50b1N0cmluZygpOw0KfS8vaWRtYWNzX2J1aWx0aW5zX3JlYWRfaGVscF9maWxlDQo8L214OkNvZGU+DQogICAgICAgICAgICA8L214OkZ1bmN0aW9uPg0KICAgICAgICAgICAgPG14OkZ1bmN0aW9uIEVuYWJsZWQ9IlRSVUUiIFNjcmlwdD0iSlNjcmlwdCIgbmFtZT0iaWRtYWNzX3NraXBfaWZfbm90X21zcyI+DQogICAgICAgICAgICAgICA8bXg6Q29kZT4vLyBDb3B5cmlnaHQgMjAxMyBMYW1iZXJ0IEJvc2thbXANCi8vDQovLyBBdXRob3I6IExhbWJlcnQgQm9za2FtcCAmbHQ7bGFtYmVydEBib3NrYW1wLWNvbnN1bHRpbmcuY29tLm5vc3BhbSZndDsNCi8vDQovLyBUaGlzIGZpbGUgaXMgcGFydCBvZiBJRE1hY3MuDQovLw0KLy8gSURNYWNzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkNCi8vIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQovLyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcg0KLy8gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4NCi8vDQovLyBJRE1hY3MgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwNCi8vIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mDQovLyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlDQovLyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KLy8NCi8vIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQovLyBhbG9uZyB3aXRoIElETWFjcy4gIElmIG5vdCwgc2VlICZsdDtodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvJmd0Oy4NCg0KLyoqDQogKiBDaGVja3Mgd2hldGhlciB0aGUgY3VycmVudCBkYXRhYmFzZSBwbGF0Zm9ybSBpcyBNaWNyb3NvZnQuDQogKiBJZiBpdCBpcyBOT1QsIHNraXBzIGV4ZWN1dGlvbiBvZiB0aGUgY3VycmVudCBwYXNzLg0KICoNCiAqIFBhcmFtZXRlcnM6DQogKiAgIG5vbmUNCiAqDQogKiBSZXR1cm5zOg0KICogICBub3RoaW5nDQogKi8NCmZ1bmN0aW9uIGlkbWFjc19za2lwX2lmX25vdF9tc3MoKXsNCgl2YXIgU0NSSVBUID0gImlkbWFjc19za2lwX2lmX25vdF9tc3M6ICI7DQoNCgl2YXIgbHZfZGJ0eXBlID0gIiUkZGRtLmRhdGFiYXNldHlwZSUiOw0KCWlkbWFjc190cmFjZShTQ1JJUFQgKyAibHZfZGJ0eXBlID0gIiArIGx2X2RidHlwZSk7DQoNCgkvL0lmIGRhdGFiYXNlIHR5cGUgaXMgbm90IE1TUw0KCWlmKGx2X2RidHlwZSAhPSAiMSIpDQoJew0KCQkvL1NraXAgdGhpcyBwYXNzDQoJCXVTa2lwKDIpOw0KCX0NCglyZXR1cm47DQp9Ly9pZG1hY3Nfc2tpcF9pZl9ub3RfbXNzDQo8L214OkNvZGU+DQogICAgICAgICAgICA8L214OkZ1bmN0aW9uPg0KICAgICAgICAgICAgPG14OkZ1bmN0aW9uIEVuYWJsZWQ9IlRSVUUiIFNjcmlwdD0iSlNjcmlwdCIgbmFtZT0iaWRtYWNzX2dldF9nbG9iYWxfY29uc3RhbnQiPg0KICAgICAgICAgICAgICAgPG14OkNvZGU+Ly8gTWFpbiBmdW5jdGlvbjogaWRtYWNzX2dldF9nbG9iYWxfY29uc3RhbnQNCg0KZnVuY3Rpb24gaWRtYWNzX2dldF9nbG9iYWxfY29uc3RhbnQoUGFyKXsNCiAgICB2YXIgbHRfYXJncyA9IFBhci5zcGxpdCgiISEiKTsNCiAgICB2YXIgbHZfY29uc3RhbnRfbmFtZSA9IGx0X2FyZ3NbMF07DQogICAgdmFyIGx2X2RlZmF1bHRfdmFsdWUgPSBsdF9hcmdzLmxlbmd0aCAmZ3Q7IDEgPyBsdF9hcmdzWzFdIDogIiI7DQogICAgdmFyIGx2X3JldHVybiA9IHVHZXRDb25zdGFudChsdl9jb25zdGFudF9uYW1lKTsNCiAgICBpZihsdl9yZXR1cm4gPT0gIiIpIHsNCiAgICAgICAgbHZfcmV0dXJuID0gbHZfZGVmYXVsdF92YWx1ZTsNCiAgICB9DQoNCiAgICByZXR1cm4gbHZfcmV0dXJuOw0KfQ0KPC9teDpDb2RlPg0KICAgICAgICAgICAgPC9teDpGdW5jdGlvbj4NCiAgICAgICAgICAgIDxteDpGdW5jdGlvbiBFbmFibGVkPSJUUlVFIiBTY3JpcHQ9IkpTY3JpcHQiIG5hbWU9ImlkbWFjc19za2lwX2lmX25vdF9kYjIiPg0KICAgICAgICAgICAgICAgPG14OkNvZGU+Ly8gQ29weXJpZ2h0IDIwMTMgTGFtYmVydCBCb3NrYW1wDQovLw0KLy8gQXV0aG9yOiBMYW1iZXJ0IEJvc2thbXAgJmx0O2xhbWJlcnRAYm9za2FtcC1jb25zdWx0aW5nLmNvbS5ub3NwYW0mZ3Q7DQovLw0KLy8gVGhpcyBmaWxlIGlzIHBhcnQgb2YgSURNYWNzLg0KLy8NCi8vIElETWFjcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5DQovLyBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQ0KLy8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3INCi8vIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uDQovLw0KLy8gSURNYWNzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsDQovLyBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZg0KLy8gTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQ0KLy8gR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4NCi8vDQovLyBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQ0KLy8gYWxvbmcgd2l0aCBJRE1hY3MuICBJZiBub3QsIHNlZSAmbHQ7aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLyZndDsuDQoNCi8qKg0KICogQ2hlY2tzIHdoZXRoZXIgdGhlIGN1cnJlbnQgZGF0YWJhc2UgcGxhdGZvcm0gaXMgSUJNIERCMi4NCiAqIElmIGl0IGlzIE5PVCwgc2tpcHMgZXhlY3V0aW9uIG9mIHRoZSBjdXJyZW50IHBhc3MuDQogKg0KICogUGFyYW1ldGVyczoNCiAqICAgbm9uZQ0KICoNCiAqIFJldHVybnM6DQogKiAgIG5vdGhpbmcNCiAqLw0KZnVuY3Rpb24gaWRtYWNzX3NraXBfaWZfbm90X2RiMigpew0KCXZhciBTQ1JJUFQgPSAiaWRtYWNzX3NraXBfaWZfbm90X2RiMjogIjsNCg0KCXZhciBsdl9kYnR5cGUgPSAiJSRkZG0uZGF0YWJhc2V0eXBlJSI7DQoJaWRtYWNzX3RyYWNlKFNDUklQVCArICJsdl9kYnR5cGUgPSAiICsgbHZfZGJ0eXBlKTsNCg0KCS8vSWYgZGF0YWJhc2UgdHlwZSBpcyBub3QgREIyDQoJaWYobHZfZGJ0eXBlICE9ICI1IikNCgl7DQoJCS8vU2tpcCB0aGlzIHBhc3MNCgkJdVNraXAoMik7DQoJfQ0KCXJldHVybjsNCn0vL2lkbWFjc19za2lwX2lmX25vdF9kYjINCjwvbXg6Q29kZT4NCiAgICAgICAgICAgIDwvbXg6RnVuY3Rpb24+DQogICAgICAgICA8L214OkZ1bmN0aW9ucz4NCiAgICAgICAgIDxteDpDb21tb24+DQogICAgICAgICAgICA8RU5HSU5FVFlQRT4xPC9FTkdJTkVUWVBFPg0KICAgICAgICAgICAgPFNDUklQVEVORz5KU2NyaXB0PC9TQ1JJUFRFTkc+DQogICAgICAgICAgICA8RVZMT0c+MDwvRVZMT0c+DQogICAgICAgICAgICA8RVJSTE9HPiUkZGRtLmRkbXBhdGglXERTRS5sb2c8L0VSUkxPRz4NCiAgICAgICAgICAgIDxYTFJFU0VUPjE8L1hMUkVTRVQ+DQogICAgICAgICAgICA8U05NUFRSQVBMRVZFTD4wPC9TTk1QVFJBUExFVkVMPg0KICAgICAgICAgICAgPE1BWEVSUk9SPjA8L01BWEVSUk9SPg0KICAgICAgICAgICAgPExPR0xJTUlUPjI1MDA8L0xPR0xJTUlUPg0KICAgICAgICAgICAgPE1DTE9HTEVWRUw+MTwvTUNMT0dMRVZFTD4NCiAgICAgICAgICAgIDxSSUdIVF9UUklNPjE8L1JJR0hUX1RSSU0+DQogICAgICAgICAgICA8UEFTU0RPQz4vLyBDb3B5cmlnaHQgMjAxMyBMYW1iZXJ0IEJvc2thbXANCi8vDQovLyBBdXRob3I6IExhbWJlcnQgQm9za2FtcCAmbHQ7bGFtYmVydEBib3NrYW1wLWNvbnN1bHRpbmcuY29tLm5vc3BhbSZndDsNCi8vDQovLyBUaGlzIGZpbGUgaXMgcGFydCBvZiBJRE1hY3MuDQovLw0KLy8gSURNYWNzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkNCi8vIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5DQovLyB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcg0KLy8gKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4NCi8vDQovLyBJRE1hY3MgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwNCi8vIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mDQovLyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlDQovLyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLg0KLy8NCi8vIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlDQovLyBhbG9uZyB3aXRoIElETWFjcy4gIElmIG5vdCwgc2VlICZsdDtodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvJmd0Oy4NCjwvUEFTU0RPQz4NCiAgICAgICAgIDwvbXg6Q29tbW9uPg0KICAgICAgICAgPG14OlBhc3MgbmFtZT0iNDk3NTU1N0EtRkVEOS00RERDLThEM0MtODU1MDdCNUJFMEU1Ij4NCiAgICAgICAgICAgIDxUWVBFPlRvQVNDSUk8L1RZUEU+DQogICAgICAgICAgICA8REVTQ1JJUFRJT04+T1JBIFRhYmxlIE5hbWVzIERpY3Rpb25hcnk8L0RFU0NSSVBUSU9OPg0KICAgICAgICAgICAgPFVTRUlEU1RPUkU+MDwvVVNFSURTVE9SRT4NCiAgICAgICAgICAgIDxJRFNUT1JFPjE8L0lEU1RPUkU+DQogICAgICAgICAgICA8RlJPTURCPiUkZGRtLmlkZW50aXR5Y2VudGVyJTwvRlJPTURCPg0KICAgICAgICAgICAgPEZST01TUUw+LS0gVGFibGVzIG93bmVkIGJ5IE9QRVIgdXNlcg0KU0VMRUNUIERJU1RJTkNUIGxvd2VyKHRhYmxlX25hbWUpIGFzIHRhYmxlX25hbWUgRlJPTSAoDQogIFNFTEVDVCANCiAgICB0YWJsZV9uYW1lDQogICAgRlJPTSBhbGxfdGFibGVzDQogICAgLS0gYnVpbGQgT1BFUiB1c2VyIG5hbWUgYnkgY29uY2F0ZW5hdGluZyBwcmVmaXggb2Ygb3duIG5hbWUgd2l0aCBPUEVSOw0KICAgIC0tIFRoaXMgYXNzdW1lcyBJJ20gdGhlIFJUIHVzZXIuDQogICAgV0hFUkUgb3duZXIgPSBzdWJzdHIgKFVTRVIsIDEsIExFTkdUSChVU0VSKSAtIDIpIHx8ICdPUEVSJw0KICANCiAgICAtLSB1bmlvbmVkIHdpdGggdGFibGVzIG93bmVkIGJ5IG15c2VsZg0KICAgIFVOSU9OIFNFTEVDVA0KICAgICAgdGFibGVfbmFtZQ0KICAgICAgRlJPTSB1c2VyX3RhYmxlcw0KICApIE9SREVSIEJZIHRhYmxlX25hbWU8L0ZST01TUUw+DQogICAgICAgICAgICA8Q0hBUlNFVD5BdXRvPC9DSEFSU0VUPg0KICAgICAgICAgICAgPEJJTkFSWU9VVFBVVD4wPC9CSU5BUllPVVRQVVQ+DQogICAgICAgICAgICA8QUREUVVPVEVTPjA8L0FERFFVT1RFUz4NCiAgICAgICAgICAgIDxDU1Y+MDwvQ1NWPg0KICAgICAgICAgICAgPENTVkhFQUQ+MTwvQ1NWSEVBRD4NCiAgICAgICAgICAgIDxBUkVTRVQ+MTwvQVJFU0VUPg0KICAgICAgICAgICAgPFNFQ1VSSVRZT1BUSU9OPi0xPC9TRUNVUklUWU9QVElPTj4NCiAgICAgICAgICAgIDxMREFQQ0hBUlNFVD4tMTwvTERBUENIQVJTRVQ+DQogICAgICAgICAgICA8UE9SVD4zODk8L1BPUlQ+DQogICAgICAgICAgICA8TUFYRVJSPjMwMDwvTUFYRVJSPg0KICAgICAgICAgICAgPEdFTkVNUFRZPjE8L0dFTkVNUFRZPg0KICAgICAgICAgICAgPExESUZTUExJVExJTkU+fDwvTERJRlNQTElUTElORT4NCiAgICAgICAgICAgIDxSRVNFVD4wPC9SRVNFVD4NCiAgICAgICAgICAgIDxEU01MPjA8L0RTTUw+DQogICAgICAgICAgICA8UkVQT1NJVE9SWT4wPC9SRVBPU0lUT1JZPg0KICAgICAgICAgICAgPERFTFRBRU5BQkxFRD4wPC9ERUxUQUVOQUJMRUQ+DQogICAgICAgICAgICA8TUFYREVMRVRFPjUlPC9NQVhERUxFVEU+DQogICAgICAgICAgICA8U0tJUD4xPC9TS0lQPg0KICAgICAgICAgICAgPEpVU1RERUxUQT4wPC9KVVNUREVMVEE+DQogICAgICAgICAgICA8TUFSS0RFTD4xPC9NQVJLREVMPg0KICAgICAgICAgICAgPENVUlJUQUI+MjwvQ1VSUlRBQj4NCiAgICAgICAgICAgIDxteDpDbGFzcz4NCiAgICAgICAgICAgICAgIDxteDphdHRyIG5hbWU9IkRlbHRhS2V5Ij4NCiAgICAgICAgICAgICAgICAgIDxteDp2YWx1ZT5Ob19EZWx0YUtleTwvbXg6dmFsdWU+DQogICAgICAgICAgICAgICA8L214OmF0dHI+DQogICAgICAgICAgICAgICA8bXg6YXR0ciBuYW1lPSJJdGVtMSI+DQogICAgICAgICAgICAgICAgICA8bXg6dmFsdWU+JVRBQkxFX05BTUUlPC9teDp2YWx1ZT4NCiAgICAgICAgICAgICAgIDwvbXg6YXR0cj4NCiAgICAgICAgICAgIDwvbXg6Q2xhc3M+DQogICAgICAgICAgICA8UElOSVRJQUxJWkU+aWRtYWNzX3NraXBfaWZfbm90X29yYTwvUElOSVRJQUxJWkU+DQogICAgICAgICAgICA8QVNDSUlGPiUkSURNQUNTX0RJQ1RfRElSJVx0YWJsZXMuZGljPC9BU0NJSUY+DQogICAgICAgICA8L214OlBhc3M+DQogICAgICAgICA8bXg6UGFzcyBuYW1lPSI2NUU5NzlBRC0wRDM4LTQ1M0UtQkRFMi1BRDVGOTYxNDk1NTMiPg0KICAgICAgICAgICAgPFRZUEU+VG8gR2VuZXJpYzwvVFlQRT4NCiAgICAgICAgICAgIDxERVNDUklQVElPTj5DcmVhdGUgRGljdGlvbmFyeSBEaXJlY3Rvcnk8L0RFU0NSSVBUSU9OPg0KICAgICAgICAgICAgPFVTRUlEU1RPUkU+MDwvVVNFSURTVE9SRT4NCiAgICAgICAgICAgIDxJRFNUT1JFPjE8L0lEU1RPUkU+DQogICAgICAgICAgICA8U0NSSVBUTkVYVD5pZG1hY3NfbWtkaXJzPC9TQ1JJUFRORVhUPg0KICAgICAgICAgICAgPFJFUE9TSVRPUlk+MDwvUkVQT1NJVE9SWT4NCiAgICAgICAgICAgIDxERUxUQUVOQUJMRUQ+MDwvREVMVEFFTkFCTEVEPg0KICAgICAgICAgICAgPE1BWERFTEVURT41JTwvTUFYREVMRVRFPg0KICAgICAgICAgICAgPFNLSVA+MTwvU0tJUD4NCiAgICAgICAgICAgIDxKVVNUREVMVEE+MDwvSlVTVERFTFRBPg0KICAgICAgICAgICAgPE1BUktERUw+MTwvTUFSS0RFTD4NCiAgICAgICAgICAgIDxDVVJSVEFCPjI8L0NVUlJUQUI+DQogICAgICAgICAgICA8bXg6Q2xhc3M+DQogICAgICAgICAgICAgICA8bXg6YXR0ciBuYW1lPSJESVIwIj4NCiAgICAgICAgICAgICAgICAgIDxteDp2YWx1ZT4lJElETUFDU19ESUNUX0RJUiU8L214OnZhbHVlPg0KICAgICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgPC9teDpDbGFzcz4NCiAgICAgICAgIDwvbXg6UGFzcz4NCiAgICAgICAgIDxteDpQYXNzIG5hbWU9IkRCODgwQTUxLTAxQTMtNDA1Ni05MTQyLUQxNTRCNjAwNkREMiI+DQogICAgICAgICAgICA8VFlQRT5Ub0FTQ0lJPC9UWVBFPg0KICAgICAgICAgICAgPERFU0NSSVBUSU9OPk9SQSBWaWV3IE5hbWVzIERpY3Rpb25hcnk8L0RFU0NSSVBUSU9OPg0KICAgICAgICAgICAgPFVTRUlEU1RPUkU+MDwvVVNFSURTVE9SRT4NCiAgICAgICAgICAgIDxJRFNUT1JFPjE8L0lEU1RPUkU+DQogICAgICAgICAgICA8RlJPTURCPiUkZGRtLmlkZW50aXR5Y2VudGVyJTwvRlJPTURCPg0KICAgICAgICAgICAgPEZST01TUUw+LS0gVmlld3Mgb3duZWQgYnkgT1BFUiB1c2VyDQpTRUxFQ1QgRElTVElOQ1QgbG93ZXIodmlld19uYW1lKSBhcyB0YWJsZV9uYW1lIEZST00gKA0KICBTRUxFQ1QgDQogICAgdmlld19uYW1lDQogICAgRlJPTSBhbGxfdmlld3MNCiAgICAtLSBidWlsZCBPUEVSIHVzZXIgbmFtZSBieSBjb25jYXRlbmF0aW5nIHByZWZpeCBvZiBvd24gbmFtZSB3aXRoIE9QRVI7DQogICAgLS0gVGhpcyBhc3N1bWVzIEknbSB0aGUgUlQgdXNlci4NCiAgICBXSEVSRSBvd25lciA9IHN1YnN0ciAoVVNFUiwgMSwgTEVOR1RIKFVTRVIpIC0gMikgfHwgJ09QRVInDQogIA0KICAgIC0tIHVuaW9uZWQgd2l0aCB2aWV3cyBvd25lZCBieSBteXNlbGYNCiAgICBVTklPTiBTRUxFQ1QNCiAgICAgIHZpZXdfbmFtZQ0KICAgICAgRlJPTSB1c2VyX3ZpZXdzDQogICkgT1JERVIgQlkgdGFibGVfbmFtZTwvRlJPTVNRTD4NCiAgICAgICAgICAgIDxDSEFSU0VUPkF1dG88L0NIQVJTRVQ+DQogICAgICAgICAgICA8QklOQVJZT1VUUFVUPjA8L0JJTkFSWU9VVFBVVD4NCiAgICAgICAgICAgIDxBRERRVU9URVM+MDwvQUREUVVPVEVTPg0KICAgICAgICAgICAgPENTVj4wPC9DU1Y+DQogICAgICAgICAgICA8Q1NWSEVBRD4xPC9DU1ZIRUFEPg0KICAgICAgICAgICAgPEFSRVNFVD4xPC9BUkVTRVQ+DQogICAgICAgICAgICA8U0VDVVJJVFlPUFRJT04+LTE8L1NFQ1VSSVRZT1BUSU9OPg0KICAgICAgICAgICAgPExEQVBDSEFSU0VUPi0xPC9MREFQQ0hBUlNFVD4NCiAgICAgICAgICAgIDxQT1JUPjM4OTwvUE9SVD4NCiAgICAgICAgICAgIDxNQVhFUlI+MzAwPC9NQVhFUlI+DQogICAgICAgICAgICA8R0VORU1QVFk+MTwvR0VORU1QVFk+DQogICAgICAgICAgICA8TERJRlNQTElUTElORT58PC9MRElGU1BMSVRMSU5FPg0KICAgICAgICAgICAgPFJFU0VUPjA8L1JFU0VUPg0KICAgICAgICAgICAgPERTTUw+MDwvRFNNTD4NCiAgICAgICAgICAgIDxSRVBPU0lUT1JZPjA8L1JFUE9TSVRPUlk+DQogICAgICAgICAgICA8REVMVEFFTkFCTEVEPjA8L0RFTFRBRU5BQkxFRD4NCiAgICAgICAgICAgIDxNQVhERUxFVEU+NSU8L01BWERFTEVURT4NCiAgICAgICAgICAgIDxTS0lQPjE8L1NLSVA+DQogICAgICAgICAgICA8SlVTVERFTFRBPjA8L0pVU1RERUxUQT4NCiAgICAgICAgICAgIDxNQVJLREVMPjE8L01BUktERUw+DQogICAgICAgICAgICA8Q1VSUlRBQj4yPC9DVVJSVEFCPg0KICAgICAgICAgICAgPG14OkNsYXNzPg0KICAgICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iRGVsdGFLZXkiPg0KICAgICAgICAgICAgICAgICAgPG14OnZhbHVlPk5vX0RlbHRhS2V5PC9teDp2YWx1ZT4NCiAgICAgICAgICAgICAgIDwvbXg6YXR0cj4NCiAgICAgICAgICAgICAgIDxteDphdHRyIG5hbWU9Ikl0ZW0xIj4NCiAgICAgICAgICAgICAgICAgIDxteDp2YWx1ZT4lVEFCTEVfTkFNRSU8L214OnZhbHVlPg0KICAgICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgPC9teDpDbGFzcz4NCiAgICAgICAgICAgIDxQSU5JVElBTElaRT5pZG1hY3Nfc2tpcF9pZl9ub3Rfb3JhPC9QSU5JVElBTElaRT4NCiAgICAgICAgICAgIDxBU0NJSUY+JSRJRE1BQ1NfRElDVF9ESVIlXHZpZXdzLmRpYzwvQVNDSUlGPg0KICAgICAgICAgPC9teDpQYXNzPg0KICAgICAgICAgPG14OlBhc3MgbmFtZT0iMjU1QzAyNEYtMTRGMy00OTk1LUI2RjItOTkyODgzNEJBOEY3Ij4NCiAgICAgICAgICAgIDxUWVBFPlRvIEdlbmVyaWM8L1RZUEU+DQogICAgICAgICAgICA8REVTQ1JJUFRJT04+UGFyc2UgQnVpbHQtSW4gRnVuY3Rpb25zIEhlbHAgRmlsZTwvREVTQ1JJUFRJT04+DQogICAgICAgICAgICA8VVNFSURTVE9SRT4wPC9VU0VJRFNUT1JFPg0KICAgICAgICAgICAgPElEU1RPUkU+MTwvSURTVE9SRT4NCiAgICAgICAgICAgIDxTQ1JJUFRPUEVOLz4NCiAgICAgICAgICAgIDxTQ1JJUFRORVhUPmlkbWFjc19idWlsdGluc19uZXh0X2VudHJ5PC9TQ1JJUFRORVhUPg0KICAgICAgICAgICAgPFJFUE9TSVRPUlk+MDwvUkVQT1NJVE9SWT4NCiAgICAgICAgICAgIDxERUxUQUVOQUJMRUQ+MDwvREVMVEFFTkFCTEVEPg0KICAgICAgICAgICAgPE1BWERFTEVURT41JTwvTUFYREVMRVRFPg0KICAgICAgICAgICAgPFNLSVA+MTwvU0tJUD4NCiAgICAgICAgICAgIDxKVVNUREVMVEE+MDwvSlVTVERFTFRBPg0KICAgICAgICAgICAgPE1BUktERUw+MTwvTUFSS0RFTD4NCiAgICAgICAgICAgIDxDVVJSVEFCPjI8L0NVUlJUQUI+DQogICAgICAgICAgICA8bXg6Q2xhc3M+DQogICAgICAgICAgICAgICA8bXg6YXR0ciBuYW1lPSJIRUxQX0ZJTEUiPg0KICAgICAgICAgICAgICAgICAgPG14OnZhbHVlPiUkSURNQUNTX0hFTFBfRklMRSU8L214OnZhbHVlPg0KICAgICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iRElDVElPTkFSWV9GSUxFIj4NCiAgICAgICAgICAgICAgICAgIDxteDp2YWx1ZT4lJElETUFDU19ESUNUX0RJUiVcYnVpbHRpbnMuZGljPC9teDp2YWx1ZT4NCiAgICAgICAgICAgICAgIDwvbXg6YXR0cj4NCiAgICAgICAgICAgICAgIDxteDphdHRyIG5hbWU9IlNOSVBQRVRTX0RJUiI+DQogICAgICAgICAgICAgICAgICA8bXg6dmFsdWU+JSRJRE1BQ1NfU05JUFBFVFNfRElSJTwvbXg6dmFsdWU+DQogICAgICAgICAgICAgICA8L214OmF0dHI+DQogICAgICAgICAgICA8L214OkNsYXNzPg0KICAgICAgICAgPC9teDpQYXNzPg0KICAgICAgICAgPG14OlBhc3MgbmFtZT0iMzYyMjkwODMtOEE5Ny00REQ1LUJDNzUtMEM5RENCQTI0QTI0Ij4NCiAgICAgICAgICAgIDxUWVBFPlRvQVNDSUk8L1RZUEU+DQogICAgICAgICAgICA8REVTQ1JJUFRJT04+Q3JlYXRlIEJ1aWx0LUluIEZ1bmN0aW9uIEhlbHAgRmlsZTwvREVTQ1JJUFRJT04+DQogICAgICAgICAgICA8VVNFSURTVE9SRT4wPC9VU0VJRFNUT1JFPg0KICAgICAgICAgICAgPElEU1RPUkU+MTwvSURTVE9SRT4NCiAgICAgICAgICAgIDxDSEFSU0VUPkF1dG88L0NIQVJTRVQ+DQogICAgICAgICAgICA8QklOQVJZT1VUUFVUPjA8L0JJTkFSWU9VVFBVVD4NCiAgICAgICAgICAgIDxBRERRVU9URVM+MDwvQUREUVVPVEVTPg0KICAgICAgICAgICAgPENTVj4wPC9DU1Y+DQogICAgICAgICAgICA8Q1NWSEVBRD4xPC9DU1ZIRUFEPg0KICAgICAgICAgICAgPEFTQ0lJRj4lJElETUFDU19IRUxQX0ZJTEUlPC9BU0NJSUY+DQogICAgICAgICAgICA8QVJFU0VUPjE8L0FSRVNFVD4NCiAgICAgICAgICAgIDxTRUNVUklUWU9QVElPTj4tMTwvU0VDVVJJVFlPUFRJT04+DQogICAgICAgICAgICA8TERBUENIQVJTRVQ+LTE8L0xEQVBDSEFSU0VUPg0KICAgICAgICAgICAgPFBPUlQ+Mzg5PC9QT1JUPg0KICAgICAgICAgICAgPE1BWEVSUj4zMDA8L01BWEVSUj4NCiAgICAgICAgICAgIDxHRU5FTVBUWT4xPC9HRU5FTVBUWT4NCiAgICAgICAgICAgIDxMRElGU1BMSVRMSU5FPnw8L0xESUZTUExJVExJTkU+DQogICAgICAgICAgICA8UkVTRVQ+MDwvUkVTRVQ+DQogICAgICAgICAgICA8RFNNTD4wPC9EU01MPg0KICAgICAgICAgICAgPFJFUE9TSVRPUlk+MDwvUkVQT1NJVE9SWT4NCiAgICAgICAgICAgIDxERUxUQUVOQUJMRUQ+MDwvREVMVEFFTkFCTEVEPg0KICAgICAgICAgICAgPE1BWERFTEVURT41JTwvTUFYREVMRVRFPg0KICAgICAgICAgICAgPFNLSVA+MTwvU0tJUD4NCiAgICAgICAgICAgIDxKVVNUREVMVEE+MDwvSlVTVERFTFRBPg0KICAgICAgICAgICAgPE1BUktERUw+MTwvTUFSS0RFTD4NCiAgICAgICAgICAgIDxDVVJSVEFCPjI8L0NVUlJUQUI+DQogICAgICAgICAgICA8bXg6Q2xhc3M+DQogICAgICAgICAgICAgICA8bXg6YXR0ciBuYW1lPSJEZWx0YUtleSI+DQogICAgICAgICAgICAgICAgICA8bXg6dmFsdWU+Tm9fRGVsdGFLZXk8L214OnZhbHVlPg0KICAgICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iSXRlbTEiPg0KICAgICAgICAgICAgICAgICAgPG14OnZhbHVlPiRGVU5DVElPTi5pZG1hY3NfcmV0dXJuX3VoZWxwKCUkSURNQUNTX1VORE9DVU1FTlRFRF9CVUlMVElOUyUpJCQ8L214OnZhbHVlPg0KICAgICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgPC9teDpDbGFzcz4NCiAgICAgICAgIDwvbXg6UGFzcz4NCiAgICAgICAgIDxteDpQYXNzIG5hbWU9IkRCM0NGOUVCLUNDMUEtNDgxRS05MjdDLTczN0RFQUJBOEI2NiI+DQogICAgICAgICAgICA8VFlQRT5Ub0FTQ0lJPC9UWVBFPg0KICAgICAgICAgICAgPERFU0NSSVBUSU9OPk1TUyBUYWJsZSBOYW1lcyBEaWN0aW9uYXJ5PC9ERVNDUklQVElPTj4NCiAgICAgICAgICAgIDxVU0VJRFNUT1JFPjA8L1VTRUlEU1RPUkU+DQogICAgICAgICAgICA8SURTVE9SRT4xPC9JRFNUT1JFPg0KICAgICAgICAgICAgPEZST01EQj4lJGRkbS5pZGVudGl0eWNlbnRlciU8L0ZST01EQj4NCiAgICAgICAgICAgIDxGUk9NU1FMPi0tIFRhYmxlcyBvd25lZCBieSBteXNlbGYNClNFTEVDVA0KICAgIGxvd2VyKHRhYmxlX25hbWUpIEFTIHRhYmxlX25hbWUNCiAgICBGUk9NIGluZm9ybWF0aW9uX3NjaGVtYS50YWJsZXMNCiAgICBXSEVSRSB0YWJsZV90eXBlID0gJ0JBU0UgVEFCTEUnDQogICAgT1JERVIgQlkgdGFibGVfbmFtZTwvRlJPTVNRTD4NCiAgICAgICAgICAgIDxDSEFSU0VUPkF1dG88L0NIQVJTRVQ+DQogICAgICAgICAgICA8QklOQVJZT1VUUFVUPjA8L0JJTkFSWU9VVFBVVD4NCiAgICAgICAgICAgIDxBRERRVU9URVM+MDwvQUREUVVPVEVTPg0KICAgICAgICAgICAgPENTVj4wPC9DU1Y+DQogICAgICAgICAgICA8Q1NWSEVBRD4xPC9DU1ZIRUFEPg0KICAgICAgICAgICAgPEFSRVNFVD4xPC9BUkVTRVQ+DQogICAgICAgICAgICA8U0VDVVJJVFlPUFRJT04+LTE8L1NFQ1VSSVRZT1BUSU9OPg0KICAgICAgICAgICAgPExEQVBDSEFSU0VUPi0xPC9MREFQQ0hBUlNFVD4NCiAgICAgICAgICAgIDxQT1JUPjM4OTwvUE9SVD4NCiAgICAgICAgICAgIDxNQVhFUlI+MzAwPC9NQVhFUlI+DQogICAgICAgICAgICA8R0VORU1QVFk+MTwvR0VORU1QVFk+DQogICAgICAgICAgICA8TERJRlNQTElUTElORT58PC9MRElGU1BMSVRMSU5FPg0KICAgICAgICAgICAgPFJFU0VUPjA8L1JFU0VUPg0KICAgICAgICAgICAgPERTTUw+MDwvRFNNTD4NCiAgICAgICAgICAgIDxSRVBPU0lUT1JZPjA8L1JFUE9TSVRPUlk+DQogICAgICAgICAgICA8REVMVEFFTkFCTEVEPjA8L0RFTFRBRU5BQkxFRD4NCiAgICAgICAgICAgIDxNQVhERUxFVEU+NSU8L01BWERFTEVURT4NCiAgICAgICAgICAgIDxTS0lQPjE8L1NLSVA+DQogICAgICAgICAgICA8SlVTVERFTFRBPjA8L0pVU1RERUxUQT4NCiAgICAgICAgICAgIDxNQVJLREVMPjE8L01BUktERUw+DQogICAgICAgICAgICA8Q1VSUlRBQj4yPC9DVVJSVEFCPg0KICAgICAgICAgICAgPG14OkNsYXNzPg0KICAgICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iRGVsdGFLZXkiPg0KICAgICAgICAgICAgICAgICAgPG14OnZhbHVlPk5vX0RlbHRhS2V5PC9teDp2YWx1ZT4NCiAgICAgICAgICAgICAgIDwvbXg6YXR0cj4NCiAgICAgICAgICAgICAgIDxteDphdHRyIG5hbWU9Ikl0ZW0xIj4NCiAgICAgICAgICAgICAgICAgIDxteDp2YWx1ZT4lVEFCTEVfTkFNRSU8L214OnZhbHVlPg0KICAgICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgPC9teDpDbGFzcz4NCiAgICAgICAgICAgIDxQSU5JVElBTElaRT5pZG1hY3Nfc2tpcF9pZl9ub3RfbXNzPC9QSU5JVElBTElaRT4NCiAgICAgICAgICAgIDxBU0NJSUY+JSRJRE1BQ1NfRElDVF9ESVIlXHRhYmxlcy5kaWM8L0FTQ0lJRj4NCiAgICAgICAgIDwvbXg6UGFzcz4NCiAgICAgICAgIDxteDpQYXNzIG5hbWU9IjAxNEU4MUQwLUQwNEQtNDFBRC05MEY5LTE5MzM2QjFCMTYwRSI+DQogICAgICAgICAgICA8VFlQRT5Ub0FTQ0lJPC9UWVBFPg0KICAgICAgICAgICAgPERFU0NSSVBUSU9OPk1TUyBWaWV3IE5hbWVzIERpY3Rpb25hcnk8L0RFU0NSSVBUSU9OPg0KICAgICAgICAgICAgPFVTRUlEU1RPUkU+MDwvVVNFSURTVE9SRT4NCiAgICAgICAgICAgIDxJRFNUT1JFPjE8L0lEU1RPUkU+DQogICAgICAgICAgICA8RlJPTURCPiUkZGRtLmlkZW50aXR5Y2VudGVyJTwvRlJPTURCPg0KICAgICAgICAgICAgPEZST01TUUw+LS0gVmlld3Mgb3duZWQgYnkgbXlzZWxmDQpTRUxFQ1QNCiAgICBsb3dlcih0YWJsZV9uYW1lKSBBUyB0YWJsZV9uYW1lDQogICAgRlJPTSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzDQogICAgV0hFUkUgdGFibGVfdHlwZSA9ICdWSUVXJw0KICAgIE9SREVSIEJZIHRhYmxlX25hbWU8L0ZST01TUUw+DQogICAgICAgICAgICA8Q0hBUlNFVD5BdXRvPC9DSEFSU0VUPg0KICAgICAgICAgICAgPEJJTkFSWU9VVFBVVD4wPC9CSU5BUllPVVRQVVQ+DQogICAgICAgICAgICA8QUREUVVPVEVTPjA8L0FERFFVT1RFUz4NCiAgICAgICAgICAgIDxDU1Y+MDwvQ1NWPg0KICAgICAgICAgICAgPENTVkhFQUQ+MTwvQ1NWSEVBRD4NCiAgICAgICAgICAgIDxBUkVTRVQ+MTwvQVJFU0VUPg0KICAgICAgICAgICAgPFNFQ1VSSVRZT1BUSU9OPi0xPC9TRUNVUklUWU9QVElPTj4NCiAgICAgICAgICAgIDxMREFQQ0hBUlNFVD4tMTwvTERBUENIQVJTRVQ+DQogICAgICAgICAgICA8UE9SVD4zODk8L1BPUlQ+DQogICAgICAgICAgICA8TUFYRVJSPjMwMDwvTUFYRVJSPg0KICAgICAgICAgICAgPEdFTkVNUFRZPjE8L0dFTkVNUFRZPg0KICAgICAgICAgICAgPExESUZTUExJVExJTkU+fDwvTERJRlNQTElUTElORT4NCiAgICAgICAgICAgIDxSRVNFVD4wPC9SRVNFVD4NCiAgICAgICAgICAgIDxEU01MPjA8L0RTTUw+DQogICAgICAgICAgICA8UkVQT1NJVE9SWT4wPC9SRVBPU0lUT1JZPg0KICAgICAgICAgICAgPERFTFRBRU5BQkxFRD4wPC9ERUxUQUVOQUJMRUQ+DQogICAgICAgICAgICA8TUFYREVMRVRFPjUlPC9NQVhERUxFVEU+DQogICAgICAgICAgICA8U0tJUD4xPC9TS0lQPg0KICAgICAgICAgICAgPEpVU1RERUxUQT4wPC9KVVNUREVMVEE+DQogICAgICAgICAgICA8TUFSS0RFTD4xPC9NQVJLREVMPg0KICAgICAgICAgICAgPENVUlJUQUI+MjwvQ1VSUlRBQj4NCiAgICAgICAgICAgIDxteDpDbGFzcz4NCiAgICAgICAgICAgICAgIDxteDphdHRyIG5hbWU9IkRlbHRhS2V5Ij4NCiAgICAgICAgICAgICAgICAgIDxteDp2YWx1ZT5Ob19EZWx0YUtleTwvbXg6dmFsdWU+DQogICAgICAgICAgICAgICA8L214OmF0dHI+DQogICAgICAgICAgICAgICA8bXg6YXR0ciBuYW1lPSJJdGVtMSI+DQogICAgICAgICAgICAgICAgICA8bXg6dmFsdWU+JVRBQkxFX05BTUUlPC9teDp2YWx1ZT4NCiAgICAgICAgICAgICAgIDwvbXg6YXR0cj4NCiAgICAgICAgICAgIDwvbXg6Q2xhc3M+DQogICAgICAgICAgICA8UElOSVRJQUxJWkU+aWRtYWNzX3NraXBfaWZfbm90X21zczwvUElOSVRJQUxJWkU+DQogICAgICAgICAgICA8QVNDSUlGPiUkSURNQUNTX0RJQ1RfRElSJVx2aWV3cy5kaWM8L0FTQ0lJRj4NCiAgICAgICAgIDwvbXg6UGFzcz4NCiAgICAgICAgIDxteDpQYXNzIG5hbWU9IjNGMTcwN0VGLTY4RUEtNEU3OS1BNzRELTMyMzFCQzI2QTBBNCI+DQogICAgICAgICAgICA8VFlQRT5Ub0FTQ0lJPC9UWVBFPg0KICAgICAgICAgICAgPERFU0NSSVBUSU9OPkF0dHJpYnV0ZSBOYW1lcyBEaWN0aW9uYXJ5PC9ERVNDUklQVElPTj4NCiAgICAgICAgICAgIDxVU0VJRFNUT1JFPjA8L1VTRUlEU1RPUkU+DQogICAgICAgICAgICA8SURTVE9SRT4xPC9JRFNUT1JFPg0KICAgICAgICAgICAgPEZST01EQj4lJGRkbS5pZGVudGl0eWNlbnRlciU8L0ZST01EQj4NCiAgICAgICAgICAgIDxGUk9NU1FMPlNFTEVDVCANCiAgYXR0cm5hbWUgDQogIEZST00gbXhpX2F0dHJpYnV0ZXMgDQogIFdIRVJFIGlzX2lkPSRGVU5DVElPTi5pZG1hY3NfZ2V0X2dsb2JhbF9jb25zdGFudChTQVBfTUFTVEVSX0lEU19JRCEhMSkkJA0KICBPUkRFUiBCWSBhdHRybmFtZTwvRlJPTVNRTD4NCiAgICAgICAgICAgIDxDSEFSU0VUPkF1dG88L0NIQVJTRVQ+DQogICAgICAgICAgICA8QklOQVJZT1VUUFVUPjA8L0JJTkFSWU9VVFBVVD4NCiAgICAgICAgICAgIDxBRERRVU9URVM+MDwvQUREUVVPVEVTPg0KICAgICAgICAgICAgPENTVj4wPC9DU1Y+DQogICAgICAgICAgICA8Q1NWSEVBRD4xPC9DU1ZIRUFEPg0KICAgICAgICAgICAgPEFSRVNFVD4xPC9BUkVTRVQ+DQogICAgICAgICAgICA8U0VDVVJJVFlPUFRJT04+LTE8L1NFQ1VSSVRZT1BUSU9OPg0KICAgICAgICAgICAgPExEQVBDSEFSU0VUPi0xPC9MREFQQ0hBUlNFVD4NCiAgICAgICAgICAgIDxQT1JUPjM4OTwvUE9SVD4NCiAgICAgICAgICAgIDxNQVhFUlI+MzAwPC9NQVhFUlI+DQogICAgICAgICAgICA8R0VORU1QVFk+MTwvR0VORU1QVFk+DQogICAgICAgICAgICA8TERJRlNQTElUTElORT58PC9MRElGU1BMSVRMSU5FPg0KICAgICAgICAgICAgPFJFU0VUPjA8L1JFU0VUPg0KICAgICAgICAgICAgPERTTUw+MDwvRFNNTD4NCiAgICAgICAgICAgIDxSRVBPU0lUT1JZPjA8L1JFUE9TSVRPUlk+DQogICAgICAgICAgICA8REVMVEFFTkFCTEVEPjA8L0RFTFRBRU5BQkxFRD4NCiAgICAgICAgICAgIDxNQVhERUxFVEU+NSU8L01BWERFTEVURT4NCiAgICAgICAgICAgIDxTS0lQPjE8L1NLSVA+DQogICAgICAgICAgICA8SlVTVERFTFRBPjA8L0pVU1RERUxUQT4NCiAgICAgICAgICAgIDxNQVJLREVMPjE8L01BUktERUw+DQogICAgICAgICAgICA8Q1VSUlRBQj4yPC9DVVJSVEFCPg0KICAgICAgICAgICAgPG14OkNsYXNzPg0KICAgICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iRGVsdGFLZXkiPg0KICAgICAgICAgICAgICAgICAgPG14OnZhbHVlPk5vX0RlbHRhS2V5PC9teDp2YWx1ZT4NCiAgICAgICAgICAgICAgIDwvbXg6YXR0cj4NCiAgICAgICAgICAgICAgIDxteDphdHRyIG5hbWU9Ikl0ZW0xIj4NCiAgICAgICAgICAgICAgICAgIDxteDp2YWx1ZT4lQVRUUk5BTUUlPC9teDp2YWx1ZT4NCiAgICAgICAgICAgICAgIDwvbXg6YXR0cj4NCiAgICAgICAgICAgIDwvbXg6Q2xhc3M+DQogICAgICAgICAgICA8QVNDSUlGPiUkSURNQUNTX0RJQ1RfRElSJVxhdHRyaWJ1dGVzLmRpYzwvQVNDSUlGPg0KICAgICAgICAgPC9teDpQYXNzPg0KICAgICAgICAgPG14OlBhc3MgbmFtZT0iMTNFNDc0NDgtMTZDNi00NTNCLTk0ODgtQTVFNUYzRkJCMzk1Ij4NCiAgICAgICAgICAgIDxUWVBFPlRvQVNDSUk8L1RZUEU+DQogICAgICAgICAgICA8REVTQ1JJUFRJT04+REIyIFRhYmxlIE5hbWVzIERpY3Rpb25hcnk8L0RFU0NSSVBUSU9OPg0KICAgICAgICAgICAgPFVTRUlEU1RPUkU+MDwvVVNFSURTVE9SRT4NCiAgICAgICAgICAgIDxJRFNUT1JFPjE8L0lEU1RPUkU+DQogICAgICAgICAgICA8RlJPTURCPiUkZGRtLmlkZW50aXR5Y2VudGVyJTwvRlJPTURCPg0KICAgICAgICAgICAgPEZST01TUUw+LS0gVGFibGVzIGluIERCMiBzY2hlbWEgUFJFRklYX09QRVINClNFTEVDVCANCiAgICBMT1dFUih0YWJuYW1lKSBBUyB0YWJsZV9uYW1lDQogICAgRlJPTSBzeXNjYXQudGFibGVzIA0KICAgIFdIRVJFIHRhYnNjaGVtYT1TVUJTVFIoVVNFUiwgMSwgTEVOR1RIKFVTRVIpIC0gMikgfHwgJ09QRVInDQogICAgQU5EIHR5cGU9J1QnDQogICAgT1JERVIgQlkgdGFibGVfbmFtZTwvRlJPTVNRTD4NCiAgICAgICAgICAgIDxDSEFSU0VUPkF1dG88L0NIQVJTRVQ+DQogICAgICAgICAgICA8QklOQVJZT1VUUFVUPjA8L0JJTkFSWU9VVFBVVD4NCiAgICAgICAgICAgIDxBRERRVU9URVM+MDwvQUREUVVPVEVTPg0KICAgICAgICAgICAgPENTVj4wPC9DU1Y+DQogICAgICAgICAgICA8Q1NWSEVBRD4xPC9DU1ZIRUFEPg0KICAgICAgICAgICAgPEFSRVNFVD4xPC9BUkVTRVQ+DQogICAgICAgICAgICA8U0VDVVJJVFlPUFRJT04+LTE8L1NFQ1VSSVRZT1BUSU9OPg0KICAgICAgICAgICAgPExEQVBDSEFSU0VUPi0xPC9MREFQQ0hBUlNFVD4NCiAgICAgICAgICAgIDxQT1JUPjM4OTwvUE9SVD4NCiAgICAgICAgICAgIDxNQVhFUlI+MzAwPC9NQVhFUlI+DQogICAgICAgICAgICA8R0VORU1QVFk+MTwvR0VORU1QVFk+DQogICAgICAgICAgICA8TERJRlNQTElUTElORT58PC9MRElGU1BMSVRMSU5FPg0KICAgICAgICAgICAgPFJFU0VUPjA8L1JFU0VUPg0KICAgICAgICAgICAgPERTTUw+MDwvRFNNTD4NCiAgICAgICAgICAgIDxSRVBPU0lUT1JZPjA8L1JFUE9TSVRPUlk+DQogICAgICAgICAgICA8REVMVEFFTkFCTEVEPjA8L0RFTFRBRU5BQkxFRD4NCiAgICAgICAgICAgIDxNQVhERUxFVEU+NSU8L01BWERFTEVURT4NCiAgICAgICAgICAgIDxTS0lQPjE8L1NLSVA+DQogICAgICAgICAgICA8SlVTVERFTFRBPjA8L0pVU1RERUxUQT4NCiAgICAgICAgICAgIDxNQVJLREVMPjE8L01BUktERUw+DQogICAgICAgICAgICA8Q1VSUlRBQj4xPC9DVVJSVEFCPg0KICAgICAgICAgICAgPG14OkNsYXNzPg0KICAgICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iRGVsdGFLZXkiPg0KICAgICAgICAgICAgICAgICAgPG14OnZhbHVlPk5vX0RlbHRhS2V5PC9teDp2YWx1ZT4NCiAgICAgICAgICAgICAgIDwvbXg6YXR0cj4NCiAgICAgICAgICAgICAgIDxteDphdHRyIG5hbWU9Ikl0ZW0xIj4NCiAgICAgICAgICAgICAgICAgIDxteDp2YWx1ZT4lVEFCTEVfTkFNRSU8L214OnZhbHVlPg0KICAgICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgPC9teDpDbGFzcz4NCiAgICAgICAgICAgIDxQSU5JVElBTElaRT5pZG1hY3Nfc2tpcF9pZl9ub3RfZGIyPC9QSU5JVElBTElaRT4NCiAgICAgICAgICAgIDxBU0NJSUY+JSRJRE1BQ1NfRElDVF9ESVIlXHRhYmxlcy5kaWM8L0FTQ0lJRj4NCiAgICAgICAgIDwvbXg6UGFzcz4NCiAgICAgICAgIDxteDpQYXNzIG5hbWU9IkQ3MkJBOENGLTRGNUEtNDNDRi1BODk3LTRGNTkyOUYzQkNBRSI+DQogICAgICAgICAgICA8VFlQRT5Ub0FTQ0lJPC9UWVBFPg0KICAgICAgICAgICAgPERFU0NSSVBUSU9OPkRCMiBWaWV3IE5hbWVzIERpY3Rpb25hcnk8L0RFU0NSSVBUSU9OPg0KICAgICAgICAgICAgPFVTRUlEU1RPUkU+MDwvVVNFSURTVE9SRT4NCiAgICAgICAgICAgIDxJRFNUT1JFPjE8L0lEU1RPUkU+DQogICAgICAgICAgICA8RlJPTURCPiUkZGRtLmlkZW50aXR5Y2VudGVyJTwvRlJPTURCPg0KICAgICAgICAgICAgPEZST01TUUw+LS0gVmlld3MgaW4gREIyIHNjaGVtYSBQUkVGSVhfT1BFUg0KU0VMRUNUIA0KICAgIExPV0VSKHRhYm5hbWUpIEFTIHRhYmxlX25hbWUNCiAgICBGUk9NIHN5c2NhdC50YWJsZXMgDQogICAgV0hFUkUgdGFic2NoZW1hPVNVQlNUUihVU0VSLCAxLCBMRU5HVEgoVVNFUikgLSAyKSB8fCAnT1BFUicNCiAgICBBTkQgdHlwZT0nVicNCiAgICBPUkRFUiBCWSB0YWJsZV9uYW1lPC9GUk9NU1FMPg0KICAgICAgICAgICAgPENIQVJTRVQ+QXV0bzwvQ0hBUlNFVD4NCiAgICAgICAgICAgIDxCSU5BUllPVVRQVVQ+MDwvQklOQVJZT1VUUFVUPg0KICAgICAgICAgICAgPEFERFFVT1RFUz4wPC9BRERRVU9URVM+DQogICAgICAgICAgICA8Q1NWPjA8L0NTVj4NCiAgICAgICAgICAgIDxDU1ZIRUFEPjE8L0NTVkhFQUQ+DQogICAgICAgICAgICA8QVJFU0VUPjE8L0FSRVNFVD4NCiAgICAgICAgICAgIDxTRUNVUklUWU9QVElPTj4tMTwvU0VDVVJJVFlPUFRJT04+DQogICAgICAgICAgICA8TERBUENIQVJTRVQ+LTE8L0xEQVBDSEFSU0VUPg0KICAgICAgICAgICAgPFBPUlQ+Mzg5PC9QT1JUPg0KICAgICAgICAgICAgPE1BWEVSUj4zMDA8L01BWEVSUj4NCiAgICAgICAgICAgIDxHRU5FTVBUWT4xPC9HRU5FTVBUWT4NCiAgICAgICAgICAgIDxMRElGU1BMSVRMSU5FPnw8L0xESUZTUExJVExJTkU+DQogICAgICAgICAgICA8UkVTRVQ+MDwvUkVTRVQ+DQogICAgICAgICAgICA8RFNNTD4wPC9EU01MPg0KICAgICAgICAgICAgPFJFUE9TSVRPUlk+MDwvUkVQT1NJVE9SWT4NCiAgICAgICAgICAgIDxERUxUQUVOQUJMRUQ+MDwvREVMVEFFTkFCTEVEPg0KICAgICAgICAgICAgPE1BWERFTEVURT41JTwvTUFYREVMRVRFPg0KICAgICAgICAgICAgPFNLSVA+MTwvU0tJUD4NCiAgICAgICAgICAgIDxKVVNUREVMVEE+MDwvSlVTVERFTFRBPg0KICAgICAgICAgICAgPE1BUktERUw+MTwvTUFSS0RFTD4NCiAgICAgICAgICAgIDxDVVJSVEFCPjE8L0NVUlJUQUI+DQogICAgICAgICAgICA8bXg6Q2xhc3M+DQogICAgICAgICAgICAgICA8bXg6YXR0ciBuYW1lPSJEZWx0YUtleSI+DQogICAgICAgICAgICAgICAgICA8bXg6dmFsdWU+Tm9fRGVsdGFLZXk8L214OnZhbHVlPg0KICAgICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iSXRlbTEiPg0KICAgICAgICAgICAgICAgICAgPG14OnZhbHVlPiVUQUJMRV9OQU1FJTwvbXg6dmFsdWU+DQogICAgICAgICAgICAgICA8L214OmF0dHI+DQogICAgICAgICAgICA8L214OkNsYXNzPg0KICAgICAgICAgICAgPFBJTklUSUFMSVpFPmlkbWFjc19za2lwX2lmX25vdF9kYjI8L1BJTklUSUFMSVpFPg0KICAgICAgICAgICAgPEFTQ0lJRj4lJElETUFDU19ESUNUX0RJUiVcdmlld3MuZGljPC9BU0NJSUY+DQogICAgICAgICA8L214OlBhc3M+DQogICAgICAgICA8bXg6UGFzcyBuYW1lPSIxNkNBQ0E1OC1DODU5LTRCRjUtOTdGMS1FOUFBOURBQTRCMzMiPg0KICAgICAgICAgICAgPFRZUEU+VG9BU0NJSTwvVFlQRT4NCiAgICAgICAgICAgIDxERVNDUklQVElPTj5HbG9iYWwgU2NyaXB0cyBEaWN0aW9uYXJ5PC9ERVNDUklQVElPTj4NCiAgICAgICAgICAgIDxVU0VJRFNUT1JFPjA8L1VTRUlEU1RPUkU+DQogICAgICAgICAgICA8SURTVE9SRT4xPC9JRFNUT1JFPg0KICAgICAgICAgICAgPEZST01EQj4lJGRkbS5pZGVudGl0eWNlbnRlciU8L0ZST01EQj4NCiAgICAgICAgICAgIDxGUk9NU1FMPnNlbGVjdA0KICAgIHNjcmlwdG5hbWUNCiAgICBmcm9tIG1jX2dsb2JhbF9zY3JpcHRzDQogICAgd2hlcmUgc2NyaXB0bGFuZ3VhZ2UgPSAnSlNjcmlwdCcNCiAgICBvcmRlciBieSBzY3JpcHRuYW1lDQo8L0ZST01TUUw+DQogICAgICAgICAgICA8Q0hBUlNFVD4tMTwvQ0hBUlNFVD4NCiAgICAgICAgICAgIDxCSU5BUllPVVRQVVQ+MDwvQklOQVJZT1VUUFVUPg0KICAgICAgICAgICAgPEFERFFVT1RFUz4wPC9BRERRVU9URVM+DQogICAgICAgICAgICA8Q1NWPjA8L0NTVj4NCiAgICAgICAgICAgIDxDU1ZIRUFEPjE8L0NTVkhFQUQ+DQogICAgICAgICAgICA8QVJFU0VUPjE8L0FSRVNFVD4NCiAgICAgICAgICAgIDxTRUNVUklUWU9QVElPTj4tMTwvU0VDVVJJVFlPUFRJT04+DQogICAgICAgICAgICA8TERBUENIQVJTRVQ+LTE8L0xEQVBDSEFSU0VUPg0KICAgICAgICAgICAgPFBPUlQ+Mzg5PC9QT1JUPg0KICAgICAgICAgICAgPE1BWEVSUj4zMDA8L01BWEVSUj4NCiAgICAgICAgICAgIDxHRU5FTVBUWT4xPC9HRU5FTVBUWT4NCiAgICAgICAgICAgIDxMRElGU1BMSVRMSU5FPnw8L0xESUZTUExJVExJTkU+DQogICAgICAgICAgICA8UkVTRVQ+MDwvUkVTRVQ+DQogICAgICAgICAgICA8RFNNTD4wPC9EU01MPg0KICAgICAgICAgICAgPFJFUE9TSVRPUlk+MDwvUkVQT1NJVE9SWT4NCiAgICAgICAgICAgIDxERUxUQUVOQUJMRUQ+MDwvREVMVEFFTkFCTEVEPg0KICAgICAgICAgICAgPE1BWERFTEVURT41JTwvTUFYREVMRVRFPg0KICAgICAgICAgICAgPFNLSVA+MTwvU0tJUD4NCiAgICAgICAgICAgIDxKVVNUREVMVEE+MDwvSlVTVERFTFRBPg0KICAgICAgICAgICAgPE1BUktERUw+MTwvTUFSS0RFTD4NCiAgICAgICAgICAgIDxDVVJSVEFCPjI8L0NVUlJUQUI+DQogICAgICAgICAgICA8bXg6Q2xhc3M+DQogICAgICAgICAgICAgICA8bXg6YXR0ciBuYW1lPSJEZWx0YUtleSI+DQogICAgICAgICAgICAgICAgICA8bXg6dmFsdWU+Tm9fRGVsdGFLZXk8L214OnZhbHVlPg0KICAgICAgICAgICAgICAgPC9teDphdHRyPg0KICAgICAgICAgICAgICAgPG14OmF0dHIgbmFtZT0iSXRlbTEiPg0KICAgICAgICAgICAgICAgICAgPG14OnZhbHVlPiVTQ1JJUFROQU1FJTwvbXg6dmFsdWU+DQogICAgICAgICAgICAgICA8L214OmF0dHI+DQogICAgICAgICAgICA8L214OkNsYXNzPg0KICAgICAgICAgICAgPEFTQ0lJRj4lJElETUFDU19ESUNUX0RJUiVcZ2xvYmFsX3NjcmlwdHMuZGljPC9BU0NJSUY+DQogICAgICAgICA8L214OlBhc3M+DQogICAgICA8L214OkpvYj4NCiAgIDwvbXg6RFNFSm9icz4NCjwvbXg6RU1TPg0K</JOBDEFINITION>
         <JOBGUID>7753DB54-9698-471A-9162-9EF503BD6038</JOBGUID>
         <JOBID>3769</JOBID>
         <LOCKED_JOB>0</LOCKED_JOB>
         <MAX_LOGENTRIES>100</MAX_LOGENTRIES>
         <NAME>Export SAP IDM Symbols</NAME>
         <PROVISION>0</PROVISION>
         <REVISION_NUMBER>0</REVISION_NUMBER>
         <SCHEDULE_RULE>6</SCHEDULE_RULE>
         <STATE>1</STATE>
         <TEST>0</TEST>
         <DISPATCHERS>
            <DISPATCHER ID="1" NAME="ora_d726_dispatcher"/>
         </DISPATCHERS>
      </JOB>
   </JOBS>
   <REPOSITORIES/>
   <SCHEDULES>
      <SCHEDULE>
         <RULE_TYPE>2</RULE_TYPE>
         <RULE_TYPE_NAME>On demand</RULE_TYPE_NAME>
         <NAME>On demand</NAME>
         <WEEKDAYS/>
         <DESCRIPTION>Run only when requested</DESCRIPTION>
         <RULENO>6</RULENO>
      </SCHEDULE>
   </SCHEDULES>
   <DISPATCHERS>
      <DISPATCHER>
         <STANDARD_DSE_METACENTER_JOBS>1</STANDARD_DSE_METACENTER_JOBS>
         <JAVA_DSE_PROVISION_JOBS>1</JAVA_DSE_PROVISION_JOBS>
         <RELOAD_FREQUENCY>30</RELOAD_FREQUENCY>
         <MACHINE>ora_d726_dispatcher</MACHINE>
         <UPDATE_FREQUENCY>1</UPDATE_FREQUENCY>
         <LOGLEVEL>3</LOGLEVEL>
         <STANDARD_DSE_PROVISION_JOBS>1</STANDARD_DSE_PROVISION_JOBS>
         <DISPATCHERID>1</DISPATCHERID>
         <MAX_RUNTIMES>1</MAX_RUNTIMES>
      </DISPATCHER>
   </DISPATCHERS>
</IDM>
