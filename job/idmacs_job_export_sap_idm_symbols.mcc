<?xml version="1.0" encoding="UTF-8"?>
<IDM Exported_on="2013-05-03 22:27:53.0" ImXport_Version="v.7.2.6-720_VAL_REL-BUILD-16.10.2012_18:33:01" MC_Version="7.20.6.0-DB2-2012-10-16" ObjectType="EXPORT_STANDARD_JOB" Schema_Version="1082">
   <Questions/>
   <JOBS>
      <JOB>
         <ACTIVE>1</ACTIVE>
         <CHANGED_DATE>2013-05-03T22:26:53</CHANGED_DATE>
         <ENGINE_TYPE>2</ENGINE_TYPE>
         <GROUP_ID>21</GROUP_ID>
         <JOBDEFINITION>{B64}</JOBDEFINITION>
         <JOBGUID>7753DB54-9698-471A-9162-9EF503BD6038</JOBGUID>
         <JOBID>3681</JOBID>
         <LOCKED_JOB>0</LOCKED_JOB>
         <MAX_LOGENTRIES>100</MAX_LOGENTRIES>
         <NAME>Export SAP IDM Symbols</NAME>
         <PROVISION>0</PROVISION>
         <REVISION_NUMBER>0</REVISION_NUMBER>
         <SCHEDULE_RULE>6</SCHEDULE_RULE>
         <STATE>1</STATE>
         <STATUS>0</STATUS>
         <TEST>0</TEST>
         <DISPATCHERS>
            <DISPATCHER ID="1" NAME="db2_d726_dispatcher"/>
         </DISPATCHERS>
      </JOB>
   </JOBS>
   <REPOSITORIES/>
   <SCHEDULES>
      <SCHEDULE>
         <RULE_TYPE>2</RULE_TYPE>
         <RULE_TYPE_NAME>On demand</RULE_TYPE_NAME>
         <NAME>On demand</NAME>
         <WEEKDAYS/>
         <DESCRIPTION>Run only when requested</DESCRIPTION>
         <RULENO>6</RULENO>
      </SCHEDULE>
   </SCHEDULES>
   <DISPATCHERS>
      <DISPATCHER>
         <STANDARD_DSE_METACENTER_JOBS>1</STANDARD_DSE_METACENTER_JOBS>
         <JAVA_DSE_PROVISION_JOBS>1</JAVA_DSE_PROVISION_JOBS>
         <RELOAD_FREQUENCY>30</RELOAD_FREQUENCY>
         <MACHINE>db2_d726_dispatcher</MACHINE>
         <UPDATE_FREQUENCY>1</UPDATE_FREQUENCY>
         <LOGLEVEL>3</LOGLEVEL>
         <STANDARD_DSE_PROVISION_JOBS>1</STANDARD_DSE_PROVISION_JOBS>
         <DISPATCHERID>1</DISPATCHERID>
         <MAX_RUNTIMES>1</MAX_RUNTIMES>
      </DISPATCHER>
   </DISPATCHERS>
</IDM>
